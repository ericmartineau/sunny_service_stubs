// ignore_for_file: duplicate_import, unused_import, directives_ordering, unnecessary_null_comparison, non_constant_identifier_names, unnecessary_non_null_assertion

// DO NOT EDIT THIS FILE.  IT IS GENERATED AUTOMATICALLY AND YOUR CHANGES WILL BE OVERWRITTEN

import 'package:sunny_sdk_core/model_exports.dart';
import '../waypoints_ext.dart';

import '../model/content.dart';
import '../model/expression.dart';
import '../model/flow_action_type.dart';
import '../model/icon_info.dart';


abstract class IFlowNode
  implements MModel, FlowNodeExt {

  static late _FlowNodeConstructor of;
  static late _FlowNodeFromJson fromJson;

  /// Property getter and setter for nodeId: 
  String? get nodeId;
  set nodeId(String? nodeId);


  /// Property getter and setter for graphId: 
  String? get graphId;
  set graphId(String? graphId);


  /// Property getter and setter for name: 
  String? get name;
  set name(String? name);


  /// Property getter and setter for description: 
  String? get description;
  set description(String? description);


  /// Property getter and setter for icon: 
  IIconInfo? get icon;
  set icon(IIconInfo? icon);


  /// Property getter and setter for actionVerb: 
  String? get actionVerb;
  set actionVerb(String? actionVerb);


  /// Property getter and setter for timeoutUnit: 
  TimeUnit? get timeoutUnit;
  set timeoutUnit(TimeUnit? timeoutUnit);


  /// Property getter and setter for timeoutLength: 
  int? get timeoutLength;
  set timeoutLength(int? timeoutLength);


  /// Property getter and setter for skippable: 
  bool? get skippable;
  set skippable(bool? skippable);


  /// Property getter and setter for taskOperationRef: 
  MOperationRef? get taskOperationRef;
  set taskOperationRef(MOperationRef? taskOperationRef);


  /// Property getter and setter for flowActionType: 
  IFlowActionType? get flowActionType;
  set flowActionType(IFlowActionType? flowActionType);


  /// Property getter and setter for help: 
  List<IContent>? get help;
  set help(List<IContent>? help);


  /// Property getter and setter for completion: 
  List<IContent>? get completion;
  set completion(List<IContent>? completion);


  /// Property getter and setter for info: 
  MModel? get info;
  set info(MModel? info);


  /// Property getter and setter for config: 
  Map<String, IExpression>? get config;
  set config(Map<String, IExpression>? config);


  /// Property getter and setter for isAssisted: 
  bool? get isAssisted;
  set isAssisted(bool? isAssisted);


  /// Property getter and setter for due: 
  IExpression? get due;
  set due(IExpression? due);


  /// Property getter and setter for displayOffset: 
  TimeSpan? get displayOffset;
  set displayOffset(TimeSpan? displayOffset);


  /// Property getter and setter for isAlert: 
  bool? get isAlert;
  set isAlert(bool? isAlert);


  /// Property getter and setter for expires: 
  IExpression? get expires;
  set expires(IExpression? expires);


  @override
  String toString();
  dynamic toJson();

  @override
  operator [](key);

  @override
  operator []=(String key, value);

  @override
  void takeFrom(source);

  @override
  void takeFromMap(Map<String, dynamic>? from, {bool copyEntries = true});

  @override
  IFlowNode clone();

  @override
  Set<String> get mfields => FlowNodeFields.values;

}

class FlowNodeFields {
  static const nodeId = "nodeId";
  static const graphId = "graphId";
  static const name = "name";
  static const description = "description";
  static const icon = "icon";
  static const actionVerb = "actionVerb";
  static const timeoutUnit = "timeoutUnit";
  static const timeoutLength = "timeoutLength";
  static const skippable = "skippable";
  static const taskOperationRef = "taskOperationRef";
  static const flowActionType = "flowActionType";
  static const help = "help";
  static const completion = "completion";
  static const info = "info";
  static const config = "config";
  static const isAssisted = "isAssisted";
  static const due = "due";
  static const displayOffset = "displayOffset";
  static const isAlert = "isAlert";
  static const expires = "expires";
  static const Set<String> values = {
    nodeId, graphId, name, description, icon, actionVerb, timeoutUnit, timeoutLength, skippable, taskOperationRef, flowActionType, help, completion, info, config, isAssisted, due, displayOffset, isAlert, expires
  };
}

class FlowNodePaths {
  static const JsonPath<String> nodeId = JsonPath.internal(["nodeId"], "/nodeId");
  static const JsonPath<String> graphId = JsonPath.internal(["graphId"], "/graphId");
  static const JsonPath<String> name = JsonPath.internal(["name"], "/name");
  static const JsonPath<String> description = JsonPath.internal(["description"], "/description");
  static const JsonPath<IIconInfo> icon = JsonPath.internal(["icon"], "/icon");
  static const JsonPath<String> actionVerb = JsonPath.internal(["actionVerb"], "/actionVerb");
  static const JsonPath<TimeUnit> timeoutUnit = JsonPath.internal(["timeoutUnit"], "/timeoutUnit");
  static const JsonPath<int> timeoutLength = JsonPath.internal(["timeoutLength"], "/timeoutLength");
  static const JsonPath<bool> skippable = JsonPath.internal(["skippable"], "/skippable");
  static const JsonPath<MOperationRef> taskOperationRef = JsonPath.internal(["taskOperationRef"], "/taskOperationRef");
  static const JsonPath<IFlowActionType> flowActionType = JsonPath.internal(["flowActionType"], "/flowActionType");
  static const JsonPath<List<IContent>> help = JsonPath.internal(["help"], "/help");
  static const JsonPath<List<IContent>> completion = JsonPath.internal(["completion"], "/completion");
  static const JsonPath<MModel> info = JsonPath.internal(["info"], "/info");
  static const JsonPath<Map<String, IExpression>> config = JsonPath.internal(["config"], "/config");
  static const JsonPath<bool> isAssisted = JsonPath.internal(["isAssisted"], "/isAssisted");
  static const JsonPath<IExpression> due = JsonPath.internal(["due"], "/due");
  static const JsonPath<TimeSpan> displayOffset = JsonPath.internal(["displayOffset"], "/displayOffset");
  static const JsonPath<bool> isAlert = JsonPath.internal(["isAlert"], "/isAlert");
  static const JsonPath<IExpression> expires = JsonPath.internal(["expires"], "/expires");
  static final Set<JsonPath> values = {
    nodeId, graphId, name, description, icon, actionVerb, timeoutUnit, timeoutLength, skippable, taskOperationRef, flowActionType, help, completion, info, config, isAssisted, due, displayOffset, isAlert, expires
  };
}


const FlowNodeRef = MSchemaRef("sunny", "waypointsBuilder", "flowNode", "0.0.1", "ephemeral");

typedef _FlowNodeConstructor = IFlowNode Function({   required String? nodeId, 
  required String? graphId, 
  String? name, 
  String? description, 
  IIconInfo? icon, 
  String? actionVerb, 
  TimeUnit? timeoutUnit, 
  int? timeoutLength, 
  required bool? skippable, 
  required MOperationRef? taskOperationRef, 
  IFlowActionType? flowActionType, 
  List<IContent>? help, 
  List<IContent>? completion, 
  MModel? info, 
  required Map<String, IExpression>? config, 
  required bool? isAssisted, 
  required IExpression? due, 
  TimeSpan? displayOffset, 
  required bool? isAlert, 
  IExpression? expires
 });
typedef _FlowNodeFromJson = IFlowNode Function(dynamic any);