// ignore_for_file: duplicate_import, unused_import, directives_ordering, unnecessary_null_comparison, unnecessary_non_null_assertion

// DO NOT EDIT THIS FILE.  IT IS GENERATED AUTOMATICALLY AND YOUR CHANGES WILL BE OVERWRITTEN

import 'package:sunny_sdk_core/model_exports.dart';

import '../model/completion.dart';
import '../model/content.dart';
import '../model/display_mode.dart';
import '../model/expression.dart';
import '../model/flow_graph.dart';
import '../model/flow_node.dart';
import '../model/flow_repeat_mode.dart';
import '../model/flow_vertex.dart';
import '../model/icon_info.dart';
import '../model/start.dart';
import 'package:sunny_sdk_core/sunny_sdk_core.dart';


abstract class IAccountFlowGraph implements IFlowGraph {
  /// Property getter and setter for isTemplate: 
  bool? get isTemplate;
  

  @override
  String toString();
  dynamic toJson();

  @override
  operator [](key);

  @override
  operator []=(String key, value);

  @override
  void takeFrom(source);

  @override
  void takeFromMap(Map<String, dynamic>? from, {bool copyEntries = true});

  @override
  IAccountFlowGraph clone();

  @override
  Set<String> get mfields => AccountFlowGraphFields.values;

}

class AccountFlowGraphFields {
  
  static const repeatMode = "repeatMode";
  static const flowType = "flowType";
  static const isModelRequired = "isModelRequired";
  static const icon = "icon";
  static const graphId = "graphId";
  static const category = "category";
  static const name = "name";
  static const description = "description";
  static const marketingDescription = "marketingDescription";
  static const info = "info";
  static const infoVideo = "infoVideo";
  static const displayMode = "displayMode";
  static const config = "config";
  static const subjectTypes = "subjectTypes";
  static const isUnlisted = "isUnlisted";
  static const isTopLevel = "isTopLevel";
  static const canBeToggled = "canBeToggled";
  static const offByDefault = "offByDefault";
  static const pinned = "pinned";
  static const marketingInfo = "marketingInfo";
  static const help = "help";
  static const availableResources = "availableResources";
  static const nodes = "nodes";
  static const vertexes = "vertexes";
  static const starts = "starts";
  static const stops = "stops";
  static const parentFlow = "parentFlow";
  static const childFlows = "childFlows";
  static const isTemplate = "isTemplate";
  static const Set<String> values = {
    repeatMode, flowType, isModelRequired, icon, graphId, category, name, description, marketingDescription, info, infoVideo, displayMode, config, subjectTypes, isUnlisted, isTopLevel, canBeToggled, offByDefault, pinned, marketingInfo, help, availableResources, nodes, vertexes, starts, stops, parentFlow, childFlows, isTemplate
  };
}

class AccountFlowGraphPaths {
  
  static const JsonPath<IFlowRepeatMode> repeatMode = JsonPath.internal(["repeatMode"], "/repeatMode");
  static const JsonPath<MSchemaRef> flowType = JsonPath.internal(["flowType"], "/flowType");
  static const JsonPath<bool> isModelRequired = JsonPath.internal(["isModelRequired"], "/isModelRequired");
  static const JsonPath<IIconInfo> icon = JsonPath.internal(["icon"], "/icon");
  static const JsonPath<String> graphId = JsonPath.internal(["graphId"], "/graphId");
  static const JsonPath<String> category = JsonPath.internal(["category"], "/category");
  static const JsonPath<String> name = JsonPath.internal(["name"], "/name");
  static const JsonPath<String> description = JsonPath.internal(["description"], "/description");
  static const JsonPath<String> marketingDescription = JsonPath.internal(["marketingDescription"], "/marketingDescription");
  static const JsonPath<MModel> info = JsonPath.internal(["info"], "/info");
  static const JsonPath<Uri> infoVideo = JsonPath.internal(["infoVideo"], "/infoVideo");
  static const JsonPath<IDisplayMode> displayMode = JsonPath.internal(["displayMode"], "/displayMode");
  static const JsonPath<Map<String, IExpression>> config = JsonPath.internal(["config"], "/config");
  static const JsonPath<Map<String, MSchemaRef>> subjectTypes = JsonPath.internal(["subjectTypes"], "/subjectTypes");
  static const JsonPath<bool> isUnlisted = JsonPath.internal(["isUnlisted"], "/isUnlisted");
  static const JsonPath<bool> isTopLevel = JsonPath.internal(["isTopLevel"], "/isTopLevel");
  static const JsonPath<bool> canBeToggled = JsonPath.internal(["canBeToggled"], "/canBeToggled");
  static const JsonPath<bool> offByDefault = JsonPath.internal(["offByDefault"], "/offByDefault");
  static const JsonPath<bool> pinned = JsonPath.internal(["pinned"], "/pinned");
  static const JsonPath<List<IContent>> marketingInfo = JsonPath.internal(["marketingInfo"], "/marketingInfo");
  static const JsonPath<List<IContent>> help = JsonPath.internal(["help"], "/help");
  static const JsonPath<List<IContent>> availableResources = JsonPath.internal(["availableResources"], "/availableResources");
  static const JsonPath<List<IFlowNode>> nodes = JsonPath.internal(["nodes"], "/nodes");
  static const JsonPath<List<IFlowVertex>> vertexes = JsonPath.internal(["vertexes"], "/vertexes");
  static const JsonPath<List<IStart>> starts = JsonPath.internal(["starts"], "/starts");
  static const JsonPath<List<ICompletion>> stops = JsonPath.internal(["stops"], "/stops");
  static const JsonPath<IFlowGraph> parentFlow = JsonPath.internal(["parentFlow"], "/parentFlow");
  static const JsonPath<List<IFlowGraph>> childFlows = JsonPath.internal(["childFlows"], "/childFlows");
  static const JsonPath<bool> isTemplate = JsonPath.internal(["isTemplate"], "/isTemplate");
  static final Set<JsonPath> values = {
    repeatMode, flowType, isModelRequired, icon, graphId, category, name, description, marketingDescription, info, infoVideo, displayMode, config, subjectTypes, isUnlisted, isTopLevel, canBeToggled, offByDefault, pinned, marketingInfo, help, availableResources, nodes, vertexes, starts, stops, parentFlow, childFlows, isTemplate
  };
}


const AccountFlowGraphRef = MSchemaRef("sunny", "waypointsBuilder", "accountFlowGraph", "0.0.1", "mverse");