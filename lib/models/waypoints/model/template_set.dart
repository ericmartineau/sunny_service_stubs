// ignore_for_file: duplicate_import, unused_import, directives_ordering, unnecessary_null_comparison, non_constant_identifier_names, unnecessary_non_null_assertion

// DO NOT EDIT THIS FILE.  IT IS GENERATED AUTOMATICALLY AND YOUR CHANGES WILL BE OVERWRITTEN

import 'package:sunny_sdk_core/model_exports.dart';
import '../waypoints_ext.dart';

import '../model/content_scope.dart';
import '../model/icon_info.dart';
import '../model/template_data.dart';


abstract class ITemplateSet
  implements MEntity {

  static late _TemplateSetConstructor of;
  static late _TemplateSetFromJson fromJson;

  /// Property getter and setter for key: 
  String? get key;
  set key(String? key);


  /// Property getter and setter for name: 
  String? get name;
  set name(String? name);


  /// Property getter and setter for icon: 
  IIconInfo? get icon;
  set icon(IIconInfo? icon);


  /// Property getter and setter for category: 
  String? get category;
  set category(String? category);


  /// Property getter and setter for description: 
  String? get description;
  set description(String? description);


  /// Property getter and setter for templates: 
  List<ITemplateData>? get templates;
  set templates(List<ITemplateData>? templates);


  /// Property getter and setter for scope: 
  IContentScope? get scope;
  set scope(IContentScope? scope);


  @override
  String toString();
  dynamic toJson();

  @override
  operator [](key);

  @override
  operator []=(String key, value);

  @override
  void takeFrom(source);

  @override
  void takeFromMap(Map<String, dynamic>? from, {bool copyEntries = true});

  @override
  ITemplateSet clone();

  @override
  Set<String> get mfields => TemplateSetFields.values;

}

class TemplateSetFields {
  static const key = "key";
  static const name = "name";
  static const icon = "icon";
  static const category = "category";
  static const description = "description";
  static const templates = "templates";
  static const scope = "scope";
  static const Set<String> values = {
    key, name, icon, category, description, templates, scope
  };
}

class TemplateSetPaths {
  static const JsonPath<String> key = JsonPath.internal(["key"], "/key");
  static const JsonPath<String> name = JsonPath.internal(["name"], "/name");
  static const JsonPath<IIconInfo> icon = JsonPath.internal(["icon"], "/icon");
  static const JsonPath<String> category = JsonPath.internal(["category"], "/category");
  static const JsonPath<String> description = JsonPath.internal(["description"], "/description");
  static const JsonPath<List<ITemplateData>> templates = JsonPath.internal(["templates"], "/templates");
  static const JsonPath<IContentScope> scope = JsonPath.internal(["scope"], "/scope");
  static final Set<JsonPath> values = {
    key, name, icon, category, description, templates, scope
  };
}


const TemplateSetRef = MSchemaRef("sunny", "content", "templateSet", "0.0.1", "mverse");

typedef _TemplateSetConstructor = ITemplateSet Function({   required String? key, 
  required String? name, 
  IIconInfo? icon, 
  String? category, 
  required String? description, 
  required List<ITemplateData>? templates, 
  required IContentScope? scope
 });
typedef _TemplateSetFromJson = ITemplateSet Function(dynamic any);