// ignore_for_file: duplicate_import, unused_import, directives_ordering, unnecessary_null_comparison, unnecessary_non_null_assertion

// DO NOT EDIT THIS FILE.  IT IS GENERATED AUTOMATICALLY AND YOUR CHANGES WILL BE OVERWRITTEN

import 'package:sunny_sdk_core/model_exports.dart';



abstract class ITemplateRenderResult implements MModel {
  /// Property getter and setter for rendered: 
  String? get rendered;
  set rendered(String? rendered);

  /// Property getter and setter for parseError: 
  String? get parseError;
  set parseError(String? parseError);

  /// Property getter and setter for renderError: 
  String? get renderError;
  set renderError(String? renderError);

  /// Property getter and setter for logs: 
  List<String>? get logs;
  set logs(List<String>? logs);

  @override
  String toString();
  dynamic toJson();

  @override
  operator [](key);

  @override
  operator []=(String key, value);

  @override
  void takeFrom(source);

  @override
  void takeFromMap(Map<String, dynamic>? from, {bool copyEntries = true});

  @override
  ITemplateRenderResult clone();

  @override
  Set<String> get mfields => TemplateRenderResultFields.values;

}

class TemplateRenderResultFields {
  
  static const rendered = "rendered";
  static const parseError = "parseError";
  static const renderError = "renderError";
  static const logs = "logs";
  static const Set<String> values = {
    rendered, parseError, renderError, logs
  };
}

class TemplateRenderResultPaths {
  
  static const JsonPath<String> rendered = JsonPath.internal(["rendered"], "/rendered");
  static const JsonPath<String> parseError = JsonPath.internal(["parseError"], "/parseError");
  static const JsonPath<String> renderError = JsonPath.internal(["renderError"], "/renderError");
  static const JsonPath<List<String>> logs = JsonPath.internal(["logs"], "/logs");
  static final Set<JsonPath> values = {
    rendered, parseError, renderError, logs
  };
}


const TemplateRenderResultRef = MSchemaRef("sunny", "content", "templateRenderResult", "0.0.1", "ephemeral");