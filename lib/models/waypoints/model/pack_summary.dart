// ignore_for_file: duplicate_import, unused_import, directives_ordering, unnecessary_null_comparison, non_constant_identifier_names, unnecessary_non_null_assertion

// DO NOT EDIT THIS FILE.  IT IS GENERATED AUTOMATICALLY AND YOUR CHANGES WILL BE OVERWRITTEN

import 'package:sunny_sdk_core/model_exports.dart';
import 'package:sunny_service_stubs/models/waypoints/mixins/i_pack_summary_ext.dart';
import '../waypoints_ext.dart';

import '../model/flow_action.dart';
import '../model/flow_frame.dart';
import '../model/flow_thread.dart';

abstract class IPackSummary implements MModel, IPackSummaryExt {
  static late _PackSummaryConstructor of;
  static late _PackSummaryFromJson fromJson;

  /// Property getter and setter for flowThread:
  IFlowThread? get flowThread;
  set flowThread(IFlowThread? flowThread);

  /// Property getter and setter for childThreads:
  Map<String, int>? get childThreads;
  set childThreads(Map<String, int>? childThreads);

  /// Property getter and setter for activeFlows: A list of child flows that are currently active.
  /// A list of child flows that are currently active.
  List<String>? get activeFlows;
  set activeFlows(List<String>? activeFlows);

  /// Property getter and setter for displayThreads: A list of threads that should be flattened out in the main display (as opposed to being nested within the parent thread or hidden)
  /// A list of threads that should be flattened out in the main display (as opposed to being nested within the parent thread or hidden)
  List<IFlowThread>? get displayThreads;
  set displayThreads(List<IFlowThread>? displayThreads);

  /// Property getter and setter for activeFrames:
  List<IFlowFrame>? get activeFrames;
  set activeFrames(List<IFlowFrame>? activeFrames);

  /// Property getter and setter for flowActions:
  List<IFlowAction>? get flowActions;
  set flowActions(List<IFlowAction>? flowActions);

  @override
  String toString();
  dynamic toJson();

  @override
  operator [](key);

  @override
  operator []=(String key, value);

  @override
  void takeFrom(source);

  @override
  void takeFromMap(Map<String, dynamic>? from, {bool copyEntries = true});

  @override
  IPackSummary clone();

  @override
  Set<String> get mfields => PackSummaryFields.values;
}

class PackSummaryFields {
  static const flowThread = "flowThread";
  static const childThreads = "childThreads";
  static const activeFlows = "activeFlows";
  static const displayThreads = "displayThreads";
  static const activeFrames = "activeFrames";
  static const flowActions = "flowActions";
  static const Set<String> values = {flowThread, childThreads, activeFlows, displayThreads, activeFrames, flowActions};
}

class PackSummaryPaths {
  static const JsonPath<IFlowThread> flowThread = JsonPath.internal(["flowThread"], "/flowThread");
  static const JsonPath<Map<String, int>> childThreads = JsonPath.internal(["childThreads"], "/childThreads");
  static const JsonPath<List<String>> activeFlows = JsonPath.internal(["activeFlows"], "/activeFlows");
  static const JsonPath<List<IFlowThread>> displayThreads = JsonPath.internal(["displayThreads"], "/displayThreads");
  static const JsonPath<List<IFlowFrame>> activeFrames = JsonPath.internal(["activeFrames"], "/activeFrames");
  static const JsonPath<List<IFlowAction>> flowActions = JsonPath.internal(["flowActions"], "/flowActions");
  static final Set<JsonPath> values = {flowThread, childThreads, activeFlows, displayThreads, activeFrames, flowActions};
}

const PackSummaryRef = MSchemaRef("sunny", "waypoints", "packSummary", "0.0.1", "ephemeral");

typedef _PackSummaryConstructor = IPackSummary Function(
    {required IFlowThread? flowThread,
    required Map<String, int>? childThreads,
    required List<String>? activeFlows,
    required List<IFlowThread>? displayThreads,
    required List<IFlowFrame>? activeFrames,
    required List<IFlowAction>? flowActions});
typedef _PackSummaryFromJson = IPackSummary Function(dynamic any);
