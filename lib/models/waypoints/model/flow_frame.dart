// ignore_for_file: duplicate_import, unused_import, directives_ordering, unnecessary_null_comparison, non_constant_identifier_names, unnecessary_non_null_assertion

// DO NOT EDIT THIS FILE.  IT IS GENERATED AUTOMATICALLY AND YOUR CHANGES WILL BE OVERWRITTEN

import 'package:sunny_sdk_core/model_exports.dart';
import 'package:sunny_service_stubs/models/waypoints/mixins/flow_frame_mixin.dart';
import '../waypoints_ext.dart';

import '../model/flow_thread_for_flow_frame.dart';
import '../model/frame_status.dart';
import 'package:sunny_service_stubs/models/facts/model/assisted_task.dart';

abstract class IFlowFrame implements MEntity, IFlowFrameExt {
  static late _FlowFrameConstructor of;
  static late _FlowFrameFromJson fromJson;

  /// Property getter and setter for thread:
  IFlowThreadForFlowFrame? get thread;
  set thread(IFlowThreadForFlowFrame? thread);

  /// Property getter and setter for task:
  IAssistedTask? get task;
  set task(IAssistedTask? task);

  /// Property getter and setter for started:
  DateTime? get started;
  set started(DateTime? started);

  /// Property getter and setter for nodeId:
  String? get nodeId;
  set nodeId(String? nodeId);

  /// Property getter and setter for taskOperationRef:
  MOperationRef? get taskOperationRef;
  set taskOperationRef(MOperationRef? taskOperationRef);

  /// Property getter and setter for isAssisted:
  bool? get isAssisted;
  set isAssisted(bool? isAssisted);

  /// Property getter and setter for skippable:
  bool? get skippable;
  set skippable(bool? skippable);

  /// Property getter and setter for completed:
  DateTime? get completed;
  set completed(DateTime? completed);

  /// Property getter and setter for due:
  DateTime? get due;
  set due(DateTime? due);

  /// Property getter and setter for status:
  IFrameStatus? get status;
  set status(IFrameStatus? status);

  /// Property getter and setter for isActive:
  bool? get isActive;
  set isActive(bool? isActive);

  /// Property getter and setter for state:
  MModel? get state;
  set state(MModel? state);

  /// Property getter and setter for result:
  MModel? get result;
  set result(MModel? result);

  /// Property getter and setter for logs:
  List<String>? get logs;
  set logs(List<String>? logs);

  @override
  String toString();
  dynamic toJson();

  @override
  operator [](key);

  @override
  operator []=(String key, value);

  @override
  void takeFrom(source);

  @override
  void takeFromMap(Map<String, dynamic>? from, {bool copyEntries = true});

  @override
  IFlowFrame clone();

  @override
  Set<String> get mfields => FlowFrameFields.values;
}

class FlowFrameFields {
  static const thread = "thread";
  static const task = "task";
  static const started = "started";
  static const nodeId = "nodeId";
  static const taskOperationRef = "taskOperationRef";
  static const isAssisted = "isAssisted";
  static const skippable = "skippable";
  static const completed = "completed";
  static const due = "due";
  static const status = "status";
  static const isActive = "isActive";
  static const state = "state";
  static const result = "result";
  static const logs = "logs";
  static const Set<String> values = {
    thread,
    task,
    started,
    nodeId,
    taskOperationRef,
    isAssisted,
    skippable,
    completed,
    due,
    status,
    isActive,
    state,
    result,
    logs
  };
}

class FlowFramePaths {
  static const JsonPath<IFlowThreadForFlowFrame> thread = JsonPath.internal(["thread"], "/thread");
  static const JsonPath<IAssistedTask> task = JsonPath.internal(["task"], "/task");
  static const JsonPath<DateTime> started = JsonPath.internal(["started"], "/started");
  static const JsonPath<String> nodeId = JsonPath.internal(["nodeId"], "/nodeId");
  static const JsonPath<MOperationRef> taskOperationRef = JsonPath.internal(["taskOperationRef"], "/taskOperationRef");
  static const JsonPath<bool> isAssisted = JsonPath.internal(["isAssisted"], "/isAssisted");
  static const JsonPath<bool> skippable = JsonPath.internal(["skippable"], "/skippable");
  static const JsonPath<DateTime> completed = JsonPath.internal(["completed"], "/completed");
  static const JsonPath<DateTime> due = JsonPath.internal(["due"], "/due");
  static const JsonPath<IFrameStatus> status = JsonPath.internal(["status"], "/status");
  static const JsonPath<bool> isActive = JsonPath.internal(["isActive"], "/isActive");
  static const JsonPath<MModel> state = JsonPath.internal(["state"], "/state");
  static const JsonPath<MModel> result = JsonPath.internal(["result"], "/result");
  static const JsonPath<List<String>> logs = JsonPath.internal(["logs"], "/logs");
  static final Set<JsonPath> values = {
    thread,
    task,
    started,
    nodeId,
    taskOperationRef,
    isAssisted,
    skippable,
    completed,
    due,
    status,
    isActive,
    state,
    result,
    logs
  };
}

const FlowFrameRef = MSchemaRef("sunny", "waypoints", "flowFrame", "0.0.1", "mverse");

typedef _FlowFrameConstructor = IFlowFrame Function(
    {required IFlowThreadForFlowFrame? thread,
    IAssistedTask? task,
    required DateTime? started,
    required String? nodeId,
    required MOperationRef? taskOperationRef,
    required bool? isAssisted,
    required bool? skippable,
    DateTime? completed,
    required DateTime? due,
    required IFrameStatus? status,
    required bool? isActive,
    MModel? state,
    MModel? result,
    required List<String>? logs});
typedef _FlowFrameFromJson = IFlowFrame Function(dynamic any);
