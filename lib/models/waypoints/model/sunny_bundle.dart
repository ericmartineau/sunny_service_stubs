// ignore_for_file: duplicate_import, unused_import, directives_ordering, unnecessary_null_comparison, unnecessary_non_null_assertion

// DO NOT EDIT THIS FILE.  IT IS GENERATED AUTOMATICALLY AND YOUR CHANGES WILL BE OVERWRITTEN

import 'package:sunny_sdk_core/model_exports.dart';
import '../waypoints_ext.dart';

import '../model/color_palette.dart';
import '../model/content.dart';
import '../model/icon_info.dart';
import '../model/included_pack.dart';
import '../model/sunny_publisher.dart';


abstract class ISunnyBundle
  implements MEntity {

  static late _SunnyBundleConstructor of;
  static late _SunnyBundleFromJson fromJson;

  /// Property getter and setter for name: 
  String? get name;
  set name(String? name);


  /// Property getter and setter for marketingDescription: 
  String? get marketingDescription;
  set marketingDescription(String? marketingDescription);


  /// Property getter and setter for description: 
  String? get description;
  set description(String? description);


  /// Property getter and setter for colorPalette: 
  IColorPalette? get colorPalette;
  set colorPalette(IColorPalette? colorPalette);


  /// Property getter and setter for icon: 
  IIconInfo? get icon;
  set icon(IIconInfo? icon);


  /// Property getter and setter for headerImage: 
  Uri? get headerImage;
  set headerImage(Uri? headerImage);


  /// Property getter and setter for headerImageHeight: 
  int? get headerImageHeight;
  set headerImageHeight(int? headerImageHeight);


  /// Property getter and setter for publisher: 
  ISunnyPublisher? get publisher;
  set publisher(ISunnyPublisher? publisher);


  /// Property getter and setter for includedFlows: 
  List<IIncludedPack>? get includedFlows;
  set includedFlows(List<IIncludedPack>? includedFlows);


  /// Property getter and setter for help: 
  List<IContent>? get help;
  set help(List<IContent>? help);


  /// Property getter and setter for marketingInfo: 
  List<IContent>? get marketingInfo;
  set marketingInfo(List<IContent>? marketingInfo);


  /// Property getter and setter for features: 
  List<IContent>? get features;
  set features(List<IContent>? features);


  /// Property getter and setter for isUnlisted: 
  bool? get isUnlisted;
  set isUnlisted(bool? isUnlisted);


  /// Property getter and setter for pinned: 
  bool? get pinned;
  set pinned(bool? pinned);


  /// Property getter and setter for availableResources: 
  List<IContent>? get availableResources;
  set availableResources(List<IContent>? availableResources);


  @override
  String toString();
  dynamic toJson();

  @override
  operator [](key);

  @override
  operator []=(String key, value);

  @override
  void takeFrom(source);

  @override
  void takeFromMap(Map<String, dynamic>? from, {bool copyEntries = true});

  @override
  ISunnyBundle clone();

  @override
  Set<String> get mfields => SunnyBundleFields.values;

}

class SunnyBundleFields {
  static const name = "name";
  static const marketingDescription = "marketingDescription";
  static const description = "description";
  static const colorPalette = "colorPalette";
  static const icon = "icon";
  static const headerImage = "headerImage";
  static const headerImageHeight = "headerImageHeight";
  static const publisher = "publisher";
  static const includedFlows = "includedFlows";
  static const help = "help";
  static const marketingInfo = "marketingInfo";
  static const features = "features";
  static const isUnlisted = "isUnlisted";
  static const pinned = "pinned";
  static const availableResources = "availableResources";
  static const Set<String> values = {
    name, marketingDescription, description, colorPalette, icon, headerImage, headerImageHeight, publisher, includedFlows, help, marketingInfo, features, isUnlisted, pinned, availableResources
  };
}

class SunnyBundlePaths {
  static const JsonPath<String> name = JsonPath.internal(["name"], "/name");
  static const JsonPath<String> marketingDescription = JsonPath.internal(["marketingDescription"], "/marketingDescription");
  static const JsonPath<String> description = JsonPath.internal(["description"], "/description");
  static const JsonPath<IColorPalette> colorPalette = JsonPath.internal(["colorPalette"], "/colorPalette");
  static const JsonPath<IIconInfo> icon = JsonPath.internal(["icon"], "/icon");
  static const JsonPath<Uri> headerImage = JsonPath.internal(["headerImage"], "/headerImage");
  static const JsonPath<int> headerImageHeight = JsonPath.internal(["headerImageHeight"], "/headerImageHeight");
  static const JsonPath<ISunnyPublisher> publisher = JsonPath.internal(["publisher"], "/publisher");
  static const JsonPath<List<IIncludedPack>> includedFlows = JsonPath.internal(["includedFlows"], "/includedFlows");
  static const JsonPath<List<IContent>> help = JsonPath.internal(["help"], "/help");
  static const JsonPath<List<IContent>> marketingInfo = JsonPath.internal(["marketingInfo"], "/marketingInfo");
  static const JsonPath<List<IContent>> features = JsonPath.internal(["features"], "/features");
  static const JsonPath<bool> isUnlisted = JsonPath.internal(["isUnlisted"], "/isUnlisted");
  static const JsonPath<bool> pinned = JsonPath.internal(["pinned"], "/pinned");
  static const JsonPath<List<IContent>> availableResources = JsonPath.internal(["availableResources"], "/availableResources");
  static final Set<JsonPath> values = {
    name, marketingDescription, description, colorPalette, icon, headerImage, headerImageHeight, publisher, includedFlows, help, marketingInfo, features, isUnlisted, pinned, availableResources
  };
}


const SunnyBundleRef = MSchemaRef("sunny", "waypointsBuilder", "sunnyBundle", "0.0.1", "mverse");

typedef _SunnyBundleConstructor = ISunnyBundle Function({   required String? name, 
  String? marketingDescription, 
  required String? description, 
  IColorPalette? colorPalette, 
  IIconInfo? icon, 
  required Uri? headerImage, 
  int? headerImageHeight, 
  required ISunnyPublisher? publisher, 
  required List<IIncludedPack>? includedFlows, 
  List<IContent>? help, 
  List<IContent>? marketingInfo, 
  List<IContent>? features, 
  bool? isUnlisted, 
  bool? pinned, 
  List<IContent>? availableResources
 });
typedef _SunnyBundleFromJson = ISunnyBundle Function(dynamic any);