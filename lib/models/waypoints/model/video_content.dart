// ignore_for_file: duplicate_import, unused_import, directives_ordering, unnecessary_null_comparison, unnecessary_non_null_assertion

// DO NOT EDIT THIS FILE.  IT IS GENERATED AUTOMATICALLY AND YOUR CHANGES WILL BE OVERWRITTEN

import 'package:sunny_sdk_core/model_exports.dart';

import '../model/content.dart';
import '../model/content_delivery.dart';
import 'package:sunny_sdk_core/sunny_sdk_core.dart';


abstract class IVideoContent implements IContent {
  /// Property getter and setter for videoCaption: 
  String? get videoCaption;
  set videoCaption(String? videoCaption);

  /// Property getter and setter for videoDescription: 
  String? get videoDescription;
  set videoDescription(String? videoDescription);

  /// Property getter and setter for videoUrl: 
  String? get videoUrl;
  set videoUrl(String? videoUrl);

  /// Property getter and setter for videoThumbnailUrl: 
  String? get videoThumbnailUrl;
  set videoThumbnailUrl(String? videoThumbnailUrl);

  /// Property getter and setter for aspectRatio: 
  num? get aspectRatio;
  set aspectRatio(num? aspectRatio);

  /// Property getter and setter for videoLength: 
  TimeSpan? get videoLength;
  set videoLength(TimeSpan? videoLength);

  /// Property getter and setter for autoplay: 
  bool? get autoplay;
  set autoplay(bool? autoplay);

  /// Property getter and setter for showControls: 
  bool? get showControls;
  set showControls(bool? showControls);

  @override
  String toString();
  dynamic toJson();

  @override
  operator [](key);

  @override
  operator []=(String key, value);

  @override
  void takeFrom(source);

  @override
  void takeFromMap(Map<String, dynamic>? from, {bool copyEntries = true});

  @override
  IVideoContent clone();

  @override
  Set<String> get mfields => VideoContentFields.values;

}

class VideoContentFields {
  
  static const dismissible = "dismissible";
  static const repeatsFor = "repeatsFor";
  static const showEvery = "showEvery";
  static const delivery = "delivery";
  static const durationUnit = "durationUnit";
  static const durationAmount = "durationAmount";
  static const delayUnit = "delayUnit";
  static const delayAmount = "delayAmount";
  static const videoCaption = "videoCaption";
  static const videoDescription = "videoDescription";
  static const videoUrl = "videoUrl";
  static const videoThumbnailUrl = "videoThumbnailUrl";
  static const aspectRatio = "aspectRatio";
  static const videoLength = "videoLength";
  static const autoplay = "autoplay";
  static const showControls = "showControls";
  static const Set<String> values = {
    dismissible, repeatsFor, showEvery, delivery, durationUnit, durationAmount, delayUnit, delayAmount, videoCaption, videoDescription, videoUrl, videoThumbnailUrl, aspectRatio, videoLength, autoplay, showControls
  };
}

class VideoContentPaths {
  
  static const JsonPath<bool> dismissible = JsonPath.internal(["dismissible"], "/dismissible");
  static const JsonPath<int> repeatsFor = JsonPath.internal(["repeatsFor"], "/repeatsFor");
  static const JsonPath<int> showEvery = JsonPath.internal(["showEvery"], "/showEvery");
  static const JsonPath<IContentDelivery> delivery = JsonPath.internal(["delivery"], "/delivery");
  static const JsonPath<TimeUnit> durationUnit = JsonPath.internal(["durationUnit"], "/durationUnit");
  static const JsonPath<int> durationAmount = JsonPath.internal(["durationAmount"], "/durationAmount");
  static const JsonPath<TimeUnit> delayUnit = JsonPath.internal(["delayUnit"], "/delayUnit");
  static const JsonPath<int> delayAmount = JsonPath.internal(["delayAmount"], "/delayAmount");
  static const JsonPath<String> videoCaption = JsonPath.internal(["videoCaption"], "/videoCaption");
  static const JsonPath<String> videoDescription = JsonPath.internal(["videoDescription"], "/videoDescription");
  static const JsonPath<String> videoUrl = JsonPath.internal(["videoUrl"], "/videoUrl");
  static const JsonPath<String> videoThumbnailUrl = JsonPath.internal(["videoThumbnailUrl"], "/videoThumbnailUrl");
  static const JsonPath<num> aspectRatio = JsonPath.internal(["aspectRatio"], "/aspectRatio");
  static const JsonPath<TimeSpan> videoLength = JsonPath.internal(["videoLength"], "/videoLength");
  static const JsonPath<bool> autoplay = JsonPath.internal(["autoplay"], "/autoplay");
  static const JsonPath<bool> showControls = JsonPath.internal(["showControls"], "/showControls");
  static final Set<JsonPath> values = {
    dismissible, repeatsFor, showEvery, delivery, durationUnit, durationAmount, delayUnit, delayAmount, videoCaption, videoDescription, videoUrl, videoThumbnailUrl, aspectRatio, videoLength, autoplay, showControls
  };
}


const VideoContentRef = MSchemaRef("sunny", "content", "videoContent", "0.0.1", "ephemeral");