// ignore_for_file: duplicate_import, unused_import, directives_ordering, unnecessary_null_comparison, non_constant_identifier_names, unnecessary_non_null_assertion

// DO NOT EDIT THIS FILE.  IT IS GENERATED AUTOMATICALLY AND YOUR CHANGES WILL BE OVERWRITTEN

import 'package:sunny_sdk_core/model_exports.dart';
import 'package:sunny_service_stubs/models/waypoints/mixins/flow_graph_mixin.dart';
import '../waypoints_ext.dart';

import '../model/completion.dart';
import '../model/content.dart';
import '../model/display_mode.dart';
import '../model/expression.dart';
import '../model/flow_graph.dart';
import '../model/flow_node.dart';
import '../model/flow_repeat_mode.dart';
import '../model/flow_vertex.dart';
import '../model/icon_info.dart';
import '../model/start.dart';
import 'package:sunny_sdk_core/sunny_sdk_core.dart';

abstract class IFlowGraph with IFlowGraphExt implements MEntity {
  static late _FlowGraphConstructor of;
  static late _FlowGraphFromJson fromJson;

  /// Property getter and setter for repeatMode:
  IFlowRepeatMode? get repeatMode;
  set repeatMode(IFlowRepeatMode? repeatMode);

  /// Property getter and setter for flowType:
  MSchemaRef? get flowType;
  set flowType(MSchemaRef? flowType);

  /// Property getter and setter for isModelRequired:
  bool? get isModelRequired;
  set isModelRequired(bool? isModelRequired);

  /// Property getter and setter for icon:
  IIconInfo? get icon;
  set icon(IIconInfo? icon);

  /// Property getter and setter for graphId:
  String? get graphId;
  set graphId(String? graphId);

  /// Property getter and setter for category:
  String? get category;
  set category(String? category);

  /// Property getter and setter for name:
  String? get name;
  set name(String? name);

  /// Property getter and setter for description:
  String? get description;
  set description(String? description);

  /// Property getter and setter for marketingDescription:
  String? get marketingDescription;
  set marketingDescription(String? marketingDescription);

  /// Property getter and setter for info:
  MModel? get info;
  set info(MModel? info);

  /// Property getter and setter for infoVideo:
  Uri? get infoVideo;
  set infoVideo(Uri? infoVideo);

  /// Property getter and setter for displayMode:
  IDisplayMode? get displayMode;
  set displayMode(IDisplayMode? displayMode);

  /// Property getter and setter for config:
  Map<String, IExpression>? get config;
  set config(Map<String, IExpression>? config);

  /// Property getter and setter for subjectTypes:
  Map<String, MSchemaRef>? get subjectTypes;
  set subjectTypes(Map<String, MSchemaRef>? subjectTypes);

  /// Property getter and setter for isUnlisted:
  bool? get isUnlisted;
  set isUnlisted(bool? isUnlisted);

  /// Property getter and setter for isTopLevel:
  bool? get isTopLevel;
  set isTopLevel(bool? isTopLevel);

  /// Property getter and setter for canBeToggled:
  bool? get canBeToggled;
  set canBeToggled(bool? canBeToggled);

  /// Property getter and setter for offByDefault:
  bool? get offByDefault;
  set offByDefault(bool? offByDefault);

  /// Property getter and setter for pinned:
  bool? get pinned;
  set pinned(bool? pinned);

  /// Property getter and setter for marketingInfo:
  List<IContent>? get marketingInfo;
  set marketingInfo(List<IContent>? marketingInfo);

  /// Property getter and setter for help:
  List<IContent>? get help;
  set help(List<IContent>? help);

  /// Property getter and setter for availableResources:
  List<IContent>? get availableResources;
  set availableResources(List<IContent>? availableResources);

  /// Property getter and setter for nodes:
  List<IFlowNode>? get nodes;
  set nodes(List<IFlowNode>? nodes);

  /// Property getter and setter for vertexes:
  List<IFlowVertex>? get vertexes;
  set vertexes(List<IFlowVertex>? vertexes);

  /// Property getter and setter for starts:
  List<IStart>? get starts;
  set starts(List<IStart>? starts);

  /// Property getter and setter for stops:
  List<ICompletion>? get stops;
  set stops(List<ICompletion>? stops);

  /// Property getter and setter for parentFlow:
  IFlowGraph? get parentFlow;
  set parentFlow(IFlowGraph? parentFlow);

  /// Property getter and setter for childFlows:
  List<IFlowGraph>? get childFlows;
  set childFlows(List<IFlowGraph>? childFlows);

  @override
  String toString();
  dynamic toJson();

  @override
  operator [](key);

  @override
  operator []=(String key, value);

  @override
  void takeFrom(source);

  @override
  void takeFromMap(Map<String, dynamic>? from, {bool copyEntries = true});

  @override
  IFlowGraph clone();

  @override
  Set<String> get mfields => FlowGraphFields.values;
}

class FlowGraphFields {
  static const repeatMode = "repeatMode";
  static const flowType = "flowType";
  static const isModelRequired = "isModelRequired";
  static const icon = "icon";
  static const graphId = "graphId";
  static const category = "category";
  static const name = "name";
  static const description = "description";
  static const marketingDescription = "marketingDescription";
  static const info = "info";
  static const infoVideo = "infoVideo";
  static const displayMode = "displayMode";
  static const config = "config";
  static const subjectTypes = "subjectTypes";
  static const isUnlisted = "isUnlisted";
  static const isTopLevel = "isTopLevel";
  static const canBeToggled = "canBeToggled";
  static const offByDefault = "offByDefault";
  static const pinned = "pinned";
  static const marketingInfo = "marketingInfo";
  static const help = "help";
  static const availableResources = "availableResources";
  static const nodes = "nodes";
  static const vertexes = "vertexes";
  static const starts = "starts";
  static const stops = "stops";
  static const parentFlow = "parentFlow";
  static const childFlows = "childFlows";
  static const Set<String> values = {
    repeatMode,
    flowType,
    isModelRequired,
    icon,
    graphId,
    category,
    name,
    description,
    marketingDescription,
    info,
    infoVideo,
    displayMode,
    config,
    subjectTypes,
    isUnlisted,
    isTopLevel,
    canBeToggled,
    offByDefault,
    pinned,
    marketingInfo,
    help,
    availableResources,
    nodes,
    vertexes,
    starts,
    stops,
    parentFlow,
    childFlows
  };
}

class FlowGraphPaths {
  static const JsonPath<IFlowRepeatMode> repeatMode = JsonPath.internal(["repeatMode"], "/repeatMode");
  static const JsonPath<MSchemaRef> flowType = JsonPath.internal(["flowType"], "/flowType");
  static const JsonPath<bool> isModelRequired = JsonPath.internal(["isModelRequired"], "/isModelRequired");
  static const JsonPath<IIconInfo> icon = JsonPath.internal(["icon"], "/icon");
  static const JsonPath<String> graphId = JsonPath.internal(["graphId"], "/graphId");
  static const JsonPath<String> category = JsonPath.internal(["category"], "/category");
  static const JsonPath<String> name = JsonPath.internal(["name"], "/name");
  static const JsonPath<String> description = JsonPath.internal(["description"], "/description");
  static const JsonPath<String> marketingDescription = JsonPath.internal(["marketingDescription"], "/marketingDescription");
  static const JsonPath<MModel> info = JsonPath.internal(["info"], "/info");
  static const JsonPath<Uri> infoVideo = JsonPath.internal(["infoVideo"], "/infoVideo");
  static const JsonPath<IDisplayMode> displayMode = JsonPath.internal(["displayMode"], "/displayMode");
  static const JsonPath<Map<String, IExpression>> config = JsonPath.internal(["config"], "/config");
  static const JsonPath<Map<String, MSchemaRef>> subjectTypes = JsonPath.internal(["subjectTypes"], "/subjectTypes");
  static const JsonPath<bool> isUnlisted = JsonPath.internal(["isUnlisted"], "/isUnlisted");
  static const JsonPath<bool> isTopLevel = JsonPath.internal(["isTopLevel"], "/isTopLevel");
  static const JsonPath<bool> canBeToggled = JsonPath.internal(["canBeToggled"], "/canBeToggled");
  static const JsonPath<bool> offByDefault = JsonPath.internal(["offByDefault"], "/offByDefault");
  static const JsonPath<bool> pinned = JsonPath.internal(["pinned"], "/pinned");
  static const JsonPath<List<IContent>> marketingInfo = JsonPath.internal(["marketingInfo"], "/marketingInfo");
  static const JsonPath<List<IContent>> help = JsonPath.internal(["help"], "/help");
  static const JsonPath<List<IContent>> availableResources = JsonPath.internal(["availableResources"], "/availableResources");
  static const JsonPath<List<IFlowNode>> nodes = JsonPath.internal(["nodes"], "/nodes");
  static const JsonPath<List<IFlowVertex>> vertexes = JsonPath.internal(["vertexes"], "/vertexes");
  static const JsonPath<List<IStart>> starts = JsonPath.internal(["starts"], "/starts");
  static const JsonPath<List<ICompletion>> stops = JsonPath.internal(["stops"], "/stops");
  static const JsonPath<IFlowGraph> parentFlow = JsonPath.internal(["parentFlow"], "/parentFlow");
  static const JsonPath<List<IFlowGraph>> childFlows = JsonPath.internal(["childFlows"], "/childFlows");
  static final Set<JsonPath> values = {
    repeatMode,
    flowType,
    isModelRequired,
    icon,
    graphId,
    category,
    name,
    description,
    marketingDescription,
    info,
    infoVideo,
    displayMode,
    config,
    subjectTypes,
    isUnlisted,
    isTopLevel,
    canBeToggled,
    offByDefault,
    pinned,
    marketingInfo,
    help,
    availableResources,
    nodes,
    vertexes,
    starts,
    stops,
    parentFlow,
    childFlows
  };
}

const FlowGraphRef = MSchemaRef("sunny", "waypointsBuilder", "flowGraph", "0.0.1", "mverse");

typedef _FlowGraphConstructor = IFlowGraph Function(
    {required IFlowRepeatMode? repeatMode,
    MSchemaRef? flowType,
    bool? isModelRequired,
    IIconInfo? icon,
    required String? graphId,
    String? category,
    String? name,
    String? description,
    String? marketingDescription,
    MModel? info,
    Uri? infoVideo,
    IDisplayMode? displayMode,
    required Map<String, IExpression>? config,
    required Map<String, MSchemaRef>? subjectTypes,
    bool? isUnlisted,
    bool? isTopLevel,
    bool? canBeToggled,
    required bool? offByDefault,
    bool? pinned,
    List<IContent>? marketingInfo,
    List<IContent>? help,
    List<IContent>? availableResources,
    required List<IFlowNode>? nodes,
    required List<IFlowVertex>? vertexes,
    required List<IStart>? starts,
    required List<ICompletion>? stops,
    IFlowGraph? parentFlow,
    required List<IFlowGraph>? childFlows});
typedef _FlowGraphFromJson = IFlowGraph Function(dynamic any);
