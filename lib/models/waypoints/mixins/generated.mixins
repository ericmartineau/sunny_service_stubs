### AUTOGENERATED - THIS FILE IS INTENDED TO DUMP OUT MIXIN BOILERPLATE CODE.  THE BOILERPLATE CODE
### SHOULD BE COPIED OUT TO A SOURCE FILE WHEN THE MODEL IS FIRST GENERATED


mixin AccountContentTemplateMixin on AccountContentTemplateBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin AccountContentTemplateListMixin implements MModelList<AccountContentTemplate>

mixin AccountContentTemplateListMixin on AccountContentTemplateListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin AccountContentTemplateListListMixin implements MModelList<AccountContentTemplateList>

mixin AccountFlowGraphMixin on AccountFlowGraphBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin AccountFlowGraphListMixin implements MModelList<AccountFlowGraph>

mixin AccountFlowGraphListMixin on AccountFlowGraphListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin AccountFlowGraphListListMixin implements MModelList<AccountFlowGraphList>

mixin AnimationContentMixin on AnimationContentBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin AnimationContentListMixin implements MModelList<AnimationContent>

mixin AuthenticateRequestMixin on AuthenticateRequestBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin AuthenticateRequestListMixin implements MModelList<AuthenticateRequest>

mixin BasicTaskInfoMixin on BasicTaskInfoBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin BasicTaskInfoListMixin implements MModelList<BasicTaskInfo>

mixin BuildRenderContextRequestMixin on BuildRenderContextRequestBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin BuildRenderContextRequestListMixin implements MModelList<BuildRenderContextRequest>

mixin ButtonContentMixin on ButtonContentBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ButtonContentListMixin implements MModelList<ButtonContent>

mixin CelebrationContentMixin on CelebrationContentBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin CelebrationContentListMixin implements MModelList<CelebrationContent>

mixin ChangeGroupMembershipsRequestMixin on ChangeGroupMembershipsRequestBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ChangeGroupMembershipsRequestListMixin implements MModelList<ChangeGroupMembershipsRequest>

mixin CollectDataFlowInfoMixin on CollectDataFlowInfoBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin CollectDataFlowInfoListMixin implements MModelList<CollectDataFlowInfo>

mixin ColorPaletteMixin on ColorPaletteBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ColorPaletteListMixin implements MModelList<ColorPalette>

mixin CompletionMixin on CompletionBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin CompletionListMixin implements MModelList<Completion>

mixin ConfigureGroupFlowRequestMixin on ConfigureGroupFlowRequestBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ConfigureGroupFlowRequestListMixin implements MModelList<ConfigureGroupFlowRequest>

mixin ContactThreadStateMixin on ContactThreadStateBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ContactThreadStateListMixin implements MModelList<ContactThreadState>

mixin ContentMixin on ContentBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ContentListMixin implements MModelList<Content>

mixin ContentAxisMixin on ContentAxisBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ContentAxisListMixin implements MModelList<ContentAxis>

mixin ContentCategoryMixin on ContentCategoryBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ContentCategoryListMixin implements MModelList<ContentCategory>

mixin ContentDeliveryMixin on ContentDeliveryBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ContentDeliveryListMixin implements MModelList<ContentDelivery>

mixin ContentScopeMixin on ContentScopeBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ContentScopeListMixin implements MModelList<ContentScope>

mixin ContentTagMixin on ContentTagBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ContentTagListMixin implements MModelList<ContentTag>

mixin ContentTypeMixin on ContentTypeBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ContentTypeListMixin implements MModelList<ContentType>

mixin DimensionsMixin on DimensionsBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin DimensionsListMixin implements MModelList<Dimensions>

mixin DisplayModeMixin on DisplayModeBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin DisplayModeListMixin implements MModelList<DisplayMode>

mixin EmailContentMixin on EmailContentBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin EmailContentListMixin implements MModelList<EmailContent>

mixin EntryVertexMixin on EntryVertexBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin EntryVertexListMixin implements MModelList<EntryVertex>

mixin ExecuteFrameRequestMixin on ExecuteFrameRequestBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ExecuteFrameRequestListMixin implements MModelList<ExecuteFrameRequest>

mixin ExecutionStatusMixin on ExecutionStatusBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ExecutionStatusListMixin implements MModelList<ExecutionStatus>

mixin ExitVertexMixin on ExitVertexBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ExitVertexListMixin implements MModelList<ExitVertex>

mixin ExpressionMixin on ExpressionBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ExpressionListMixin implements MModelList<Expression>

mixin FactFlowQueryMixin on FactFlowQueryBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FactFlowQueryListMixin implements MModelList<FactFlowQuery>

mixin FactThreadStateMixin on FactThreadStateBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FactThreadStateListMixin implements MModelList<FactThreadState>

mixin FlexElementMixin on FlexElementBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FlexElementListMixin implements MModelList<FlexElement>

mixin FlowActionMixin on FlowActionBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FlowActionListMixin implements MModelList<FlowAction>

mixin FlowActionTypeMixin on FlowActionTypeBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FlowActionTypeListMixin implements MModelList<FlowActionType>

mixin FlowFrameMixin on FlowFrameBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FlowFrameListMixin implements MModelList<FlowFrame>

mixin FlowFrameForFlowThreadMixin on FlowFrameForFlowThreadBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FlowFrameForFlowThreadListMixin implements MModelList<FlowFrameForFlowThread>

mixin FlowFrameListMixin on FlowFrameListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FlowFrameListListMixin implements MModelList<FlowFrameList>

mixin FlowFramesMixin on FlowFramesBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FlowFramesListMixin implements MModelList<FlowFrames>

mixin FlowGraphMixin on FlowGraphBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FlowGraphListMixin implements MModelList<FlowGraph>

mixin FlowGraphListMixin on FlowGraphListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FlowGraphListListMixin implements MModelList<FlowGraphList>

mixin FlowInstallStatusMixin on FlowInstallStatusBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FlowInstallStatusListMixin implements MModelList<FlowInstallStatus>

mixin FlowNodeMixin on FlowNodeBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FlowNodeListMixin implements MModelList<FlowNode>

mixin FlowNodesMixin on FlowNodesBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FlowNodesListMixin implements MModelList<FlowNodes>

mixin FlowQueryMixin on FlowQueryBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FlowQueryListMixin implements MModelList<FlowQuery>

mixin FlowRepeatModeMixin on FlowRepeatModeBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FlowRepeatModeListMixin implements MModelList<FlowRepeatMode>

mixin FlowThreadMixin on FlowThreadBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FlowThreadListMixin implements MModelList<FlowThread>

mixin FlowThreadForFlowFrameMixin on FlowThreadForFlowFrameBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FlowThreadForFlowFrameListMixin implements MModelList<FlowThreadForFlowFrame>

mixin FlowThreadListMixin on FlowThreadListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FlowThreadListListMixin implements MModelList<FlowThreadList>

mixin FlowThreadsMixin on FlowThreadsBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FlowThreadsListMixin implements MModelList<FlowThreads>

mixin FlowVertexMixin on FlowVertexBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FlowVertexListMixin implements MModelList<FlowVertex>

mixin FrameExecutionMixin on FrameExecutionBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FrameExecutionListMixin implements MModelList<FrameExecution>

mixin FrameStatusMixin on FrameStatusBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FrameStatusListMixin implements MModelList<FrameStatus>

mixin FrameVertexMixin on FrameVertexBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FrameVertexListMixin implements MModelList<FrameVertex>

mixin GetInteractionsForContactRequestMixin on GetInteractionsForContactRequestBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin GetInteractionsForContactRequestListMixin implements MModelList<GetInteractionsForContactRequest>

mixin GiphyContentMixin on GiphyContentBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin GiphyContentListMixin implements MModelList<GiphyContent>

mixin GiveGiftSetupMixin on GiveGiftSetupBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin GiveGiftSetupListMixin implements MModelList<GiveGiftSetup>

mixin GlobalContentTemplateMixin on GlobalContentTemplateBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin GlobalContentTemplateListMixin implements MModelList<GlobalContentTemplate>

mixin GlobalContentTemplateListMixin on GlobalContentTemplateListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin GlobalContentTemplateListListMixin implements MModelList<GlobalContentTemplateList>

mixin GroupFlowMixin on GroupFlowBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin GroupFlowListMixin implements MModelList<GroupFlow>

mixin GroupFlowInfoMixin on GroupFlowInfoBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin GroupFlowInfoListMixin implements MModelList<GroupFlowInfo>

mixin GroupFlowQueryMixin on GroupFlowQueryBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin GroupFlowQueryListMixin implements MModelList<GroupFlowQuery>

mixin GroupMemberThreadStateMixin on GroupMemberThreadStateBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin GroupMemberThreadStateListMixin implements MModelList<GroupMemberThreadState>

mixin GroupThreadStateMixin on GroupThreadStateBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin GroupThreadStateListMixin implements MModelList<GroupThreadState>

mixin GroupThreadStateListMixin on GroupThreadStateListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin GroupThreadStateListListMixin implements MModelList<GroupThreadStateList>

mixin GroupThreadStatesMixin on GroupThreadStatesBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin GroupThreadStatesListMixin implements MModelList<GroupThreadStates>

mixin IconInfoMixin on IconInfoBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin IconInfoListMixin implements MModelList<IconInfo>

mixin IconTypeMixin on IconTypeBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin IconTypeListMixin implements MModelList<IconType>

mixin ImageContentMixin on ImageContentBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ImageContentListMixin implements MModelList<ImageContent>

mixin IncludedPackMixin on IncludedPackBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin IncludedPackListMixin implements MModelList<IncludedPack>

mixin InteractionContentMixin on InteractionContentBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin InteractionContentListMixin implements MModelList<InteractionContent>

mixin JoinMixin on JoinBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin JoinListMixin implements MModelList<Join>

mixin JoinRuleMixin on JoinRuleBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin JoinRuleListMixin implements MModelList<JoinRule>

mixin LayoutContentMixin on LayoutContentBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin LayoutContentListMixin implements MModelList<LayoutContent>

mixin LinkContentMixin on LinkContentBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin LinkContentListMixin implements MModelList<LinkContent>

mixin LiteralExpressionMixin on LiteralExpressionBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin LiteralExpressionListMixin implements MModelList<LiteralExpression>

mixin LocaleMixin on LocaleBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin LocaleListMixin implements MModelList<Locale>

mixin ManualEntryContentMixin on ManualEntryContentBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ManualEntryContentListMixin implements MModelList<ManualEntryContent>

mixin NamedExpressionMixin on NamedExpressionBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin NamedExpressionListMixin implements MModelList<NamedExpression>

mixin OrientationMixin on OrientationBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin OrientationListMixin implements MModelList<Orientation>

mixin OtherSetupMixin on OtherSetupBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin OtherSetupListMixin implements MModelList<OtherSetup>

mixin PackSummariesMixin on PackSummariesBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PackSummariesListMixin implements MModelList<PackSummaries>

mixin PackSummaryMixin on PackSummaryBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PackSummaryListMixin implements MModelList<PackSummary>

mixin PackSummaryListMixin on PackSummaryListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PackSummaryListListMixin implements MModelList<PackSummaryList>

mixin PauseMixin on PauseBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PauseListMixin implements MModelList<Pause>

mixin PhoneContentMixin on PhoneContentBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PhoneContentListMixin implements MModelList<PhoneContent>

mixin PrioritizeMembersRequestMixin on PrioritizeMembersRequestBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PrioritizeMembersRequestListMixin implements MModelList<PrioritizeMembersRequest>

mixin PrioritizedMemberMixin on PrioritizedMemberBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PrioritizedMemberListMixin implements MModelList<PrioritizedMember>

mixin RandomAnimationContentMixin on RandomAnimationContentBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin RandomAnimationContentListMixin implements MModelList<RandomAnimationContent>

mixin RandomContentMixin on RandomContentBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin RandomContentListMixin implements MModelList<RandomContent>

mixin RandomGiphyContentMixin on RandomGiphyContentBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin RandomGiphyContentListMixin implements MModelList<RandomGiphyContent>

mixin RangeMixin on RangeBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin RangeListMixin implements MModelList<Range>

mixin ReachOutContentMixin on ReachOutContentBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ReachOutContentListMixin implements MModelList<ReachOutContent>

mixin ReachOutDataMixin on ReachOutDataBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ReachOutDataListMixin implements MModelList<ReachOutData>

mixin ReachOutSetupMixin on ReachOutSetupBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ReachOutSetupListMixin implements MModelList<ReachOutSetup>

mixin RecurringTimeSpanMixin on RecurringTimeSpanBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin RecurringTimeSpanListMixin implements MModelList<RecurringTimeSpan>

mixin RenderContextMixin on RenderContextBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin RenderContextListMixin implements MModelList<RenderContext>

mixin RenderTemplatesRequestMixin on RenderTemplatesRequestBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin RenderTemplatesRequestListMixin implements MModelList<RenderTemplatesRequest>

mixin ResourceFlowInfoMixin on ResourceFlowInfoBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ResourceFlowInfoListMixin implements MModelList<ResourceFlowInfo>

mixin RoutingTaskInfoMixin on RoutingTaskInfoBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin RoutingTaskInfoListMixin implements MModelList<RoutingTaskInfo>

mixin ScopePathExpressionMixin on ScopePathExpressionBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ScopePathExpressionListMixin implements MModelList<ScopePathExpression>

mixin ScriptExpressionMixin on ScriptExpressionBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ScriptExpressionListMixin implements MModelList<ScriptExpression>

mixin ScriptFlowQueryMixin on ScriptFlowQueryBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ScriptFlowQueryListMixin implements MModelList<ScriptFlowQuery>

mixin ScriptLanguageMixin on ScriptLanguageBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ScriptLanguageListMixin implements MModelList<ScriptLanguage>

mixin SingleValueMixin on SingleValueBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin SingleValueListMixin implements MModelList<SingleValue>

mixin SmartGroupFilterMixin on SmartGroupFilterBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin SmartGroupFilterListMixin implements MModelList<SmartGroupFilter>

mixin SmartGroupFlowInfoMixin on SmartGroupFlowInfoBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin SmartGroupFlowInfoListMixin implements MModelList<SmartGroupFlowInfo>

mixin SmsContentMixin on SmsContentBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin SmsContentListMixin implements MModelList<SmsContent>

mixin SocialMediaContentMixin on SocialMediaContentBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin SocialMediaContentListMixin implements MModelList<SocialMediaContent>

mixin SocialTypeMixin on SocialTypeBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin SocialTypeListMixin implements MModelList<SocialType>

mixin StartMixin on StartBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin StartListMixin implements MModelList<Start>

mixin StartFlowInfoMixin on StartFlowInfoBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin StartFlowInfoListMixin implements MModelList<StartFlowInfo>

mixin StartFlowSetMixin on StartFlowSetBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin StartFlowSetListMixin implements MModelList<StartFlowSet>

mixin StartThreadRequestMixin on StartThreadRequestBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin StartThreadRequestListMixin implements MModelList<StartThreadRequest>

mixin SunnyBundleMixin on SunnyBundleBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin SunnyBundleListMixin implements MModelList<SunnyBundle>

mixin SunnyBundleListMixin on SunnyBundleListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin SunnyBundleListListMixin implements MModelList<SunnyBundleList>

mixin SunnyBundlesMixin on SunnyBundlesBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin SunnyBundlesListMixin implements MModelList<SunnyBundles>

mixin SunnyGroupMixin on SunnyGroupBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin SunnyGroupListMixin implements MModelList<SunnyGroup>

mixin SunnyInteractionMixin on SunnyInteractionBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin SunnyInteractionListMixin implements MModelList<SunnyInteraction>

mixin SunnyInteractionListMixin on SunnyInteractionListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin SunnyInteractionListListMixin implements MModelList<SunnyInteractionList>

mixin SunnyPublisherMixin on SunnyPublisherBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin SunnyPublisherListMixin implements MModelList<SunnyPublisher>

mixin SunnyPublisherListMixin on SunnyPublisherListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin SunnyPublisherListListMixin implements MModelList<SunnyPublisherList>

mixin SunnyPublishersMixin on SunnyPublishersBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin SunnyPublishersListMixin implements MModelList<SunnyPublishers>

mixin TemplateDataMixin on TemplateDataBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin TemplateDataListMixin implements MModelList<TemplateData>

mixin TemplateDataForTemplateSetMixin on TemplateDataForTemplateSetBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin TemplateDataForTemplateSetListMixin implements MModelList<TemplateDataForTemplateSet>

mixin TemplateDataListMixin on TemplateDataListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin TemplateDataListListMixin implements MModelList<TemplateDataList>

mixin TemplateMediumMixin on TemplateMediumBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin TemplateMediumListMixin implements MModelList<TemplateMedium>

mixin TemplateRenderResultMixin on TemplateRenderResultBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin TemplateRenderResultListMixin implements MModelList<TemplateRenderResult>

mixin TemplateRenderResultsMixin on TemplateRenderResultsBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin TemplateRenderResultsListMixin implements MModelList<TemplateRenderResults>

mixin TemplateSetMixin on TemplateSetBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin TemplateSetListMixin implements MModelList<TemplateSet>

mixin TemplateSetListMixin on TemplateSetListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin TemplateSetListListMixin implements MModelList<TemplateSetList>

mixin TextContentMixin on TextContentBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin TextContentListMixin implements MModelList<TextContent>

mixin TextModeMixin on TextModeBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin TextModeListMixin implements MModelList<TextMode>

mixin ThreadStatusMixin on ThreadStatusBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ThreadStatusListMixin implements MModelList<ThreadStatus>

mixin ToggleThreadStatusRequestMixin on ToggleThreadStatusRequestBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ToggleThreadStatusRequestListMixin implements MModelList<ToggleThreadStatusRequest>

mixin VideoContentMixin on VideoContentBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin VideoContentListMixin implements MModelList<VideoContent>

mixin WaitPriorMixin on WaitPriorBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin WaitPriorListMixin implements MModelList<WaitPrior>

mixin YoutubeContentMixin on YoutubeContentBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin YoutubeContentListMixin implements MModelList<YoutubeContent>


###
### NON-FACT MIXINS
###

  mixin AccountContentTemplateMixin on AccountContentTemplateBase {}
  mixin AccountContentTemplateListMixin implements MModelList<AccountContentTemplate>

  mixin AccountContentTemplateListMixin on AccountContentTemplateListBase {}
  mixin AccountContentTemplateListListMixin implements MModelList<AccountContentTemplateList>

  mixin AccountFlowGraphMixin on AccountFlowGraphBase {}
  mixin AccountFlowGraphListMixin implements MModelList<AccountFlowGraph>

  mixin AccountFlowGraphListMixin on AccountFlowGraphListBase {}
  mixin AccountFlowGraphListListMixin implements MModelList<AccountFlowGraphList>

  mixin AnimationContentMixin on AnimationContentBase {}
  mixin AnimationContentListMixin implements MModelList<AnimationContent>

  mixin AuthenticateRequestMixin on AuthenticateRequestBase {}
  mixin AuthenticateRequestListMixin implements MModelList<AuthenticateRequest>

  mixin BasicTaskInfoMixin on BasicTaskInfoBase {}
  mixin BasicTaskInfoListMixin implements MModelList<BasicTaskInfo>

  mixin BuildRenderContextRequestMixin on BuildRenderContextRequestBase {}
  mixin BuildRenderContextRequestListMixin implements MModelList<BuildRenderContextRequest>

  mixin ButtonContentMixin on ButtonContentBase {}
  mixin ButtonContentListMixin implements MModelList<ButtonContent>

  mixin CelebrationContentMixin on CelebrationContentBase {}
  mixin CelebrationContentListMixin implements MModelList<CelebrationContent>

  mixin ChangeGroupMembershipsRequestMixin on ChangeGroupMembershipsRequestBase {}
  mixin ChangeGroupMembershipsRequestListMixin implements MModelList<ChangeGroupMembershipsRequest>

  mixin CollectDataFlowInfoMixin on CollectDataFlowInfoBase {}
  mixin CollectDataFlowInfoListMixin implements MModelList<CollectDataFlowInfo>

  mixin ColorPaletteMixin on ColorPaletteBase {}
  mixin ColorPaletteListMixin implements MModelList<ColorPalette>

  mixin CompletionMixin on CompletionBase {}
  mixin CompletionListMixin implements MModelList<Completion>

  mixin ConfigureGroupFlowRequestMixin on ConfigureGroupFlowRequestBase {}
  mixin ConfigureGroupFlowRequestListMixin implements MModelList<ConfigureGroupFlowRequest>

  mixin ContactThreadStateMixin on ContactThreadStateBase {}
  mixin ContactThreadStateListMixin implements MModelList<ContactThreadState>

  mixin ContentMixin on ContentBase {}
  mixin ContentListMixin implements MModelList<Content>

  mixin ContentAxisMixin on ContentAxisBase {}
  mixin ContentAxisListMixin implements MModelList<ContentAxis>

  mixin ContentCategoryMixin on ContentCategoryBase {}
  mixin ContentCategoryListMixin implements MModelList<ContentCategory>

  mixin ContentDeliveryMixin on ContentDeliveryBase {}
  mixin ContentDeliveryListMixin implements MModelList<ContentDelivery>

  mixin ContentScopeMixin on ContentScopeBase {}
  mixin ContentScopeListMixin implements MModelList<ContentScope>

  mixin ContentTagMixin on ContentTagBase {}
  mixin ContentTagListMixin implements MModelList<ContentTag>

  mixin ContentTypeMixin on ContentTypeBase {}
  mixin ContentTypeListMixin implements MModelList<ContentType>

  mixin DimensionsMixin on DimensionsBase {}
  mixin DimensionsListMixin implements MModelList<Dimensions>

  mixin DisplayModeMixin on DisplayModeBase {}
  mixin DisplayModeListMixin implements MModelList<DisplayMode>

  mixin EmailContentMixin on EmailContentBase {}
  mixin EmailContentListMixin implements MModelList<EmailContent>

  mixin EntryVertexMixin on EntryVertexBase {}
  mixin EntryVertexListMixin implements MModelList<EntryVertex>

  mixin ExecuteFrameRequestMixin on ExecuteFrameRequestBase {}
  mixin ExecuteFrameRequestListMixin implements MModelList<ExecuteFrameRequest>

  mixin ExecutionStatusMixin on ExecutionStatusBase {}
  mixin ExecutionStatusListMixin implements MModelList<ExecutionStatus>

  mixin ExitVertexMixin on ExitVertexBase {}
  mixin ExitVertexListMixin implements MModelList<ExitVertex>

  mixin ExpressionMixin on ExpressionBase {}
  mixin ExpressionListMixin implements MModelList<Expression>

  mixin FactFlowQueryMixin on FactFlowQueryBase {}
  mixin FactFlowQueryListMixin implements MModelList<FactFlowQuery>

  mixin FactThreadStateMixin on FactThreadStateBase {}
  mixin FactThreadStateListMixin implements MModelList<FactThreadState>

  mixin FlexElementMixin on FlexElementBase {}
  mixin FlexElementListMixin implements MModelList<FlexElement>

  mixin FlowActionMixin on FlowActionBase {}
  mixin FlowActionListMixin implements MModelList<FlowAction>

  mixin FlowActionTypeMixin on FlowActionTypeBase {}
  mixin FlowActionTypeListMixin implements MModelList<FlowActionType>

  mixin FlowFrameMixin on FlowFrameBase {}
  mixin FlowFrameListMixin implements MModelList<FlowFrame>

  mixin FlowFrameForFlowThreadMixin on FlowFrameForFlowThreadBase {}
  mixin FlowFrameForFlowThreadListMixin implements MModelList<FlowFrameForFlowThread>

  mixin FlowFrameListMixin on FlowFrameListBase {}
  mixin FlowFrameListListMixin implements MModelList<FlowFrameList>

  mixin FlowFramesMixin on FlowFramesBase {}
  mixin FlowFramesListMixin implements MModelList<FlowFrames>

  mixin FlowGraphMixin on FlowGraphBase {}
  mixin FlowGraphListMixin implements MModelList<FlowGraph>

  mixin FlowGraphListMixin on FlowGraphListBase {}
  mixin FlowGraphListListMixin implements MModelList<FlowGraphList>

  mixin FlowInstallStatusMixin on FlowInstallStatusBase {}
  mixin FlowInstallStatusListMixin implements MModelList<FlowInstallStatus>

  mixin FlowNodeMixin on FlowNodeBase {}
  mixin FlowNodeListMixin implements MModelList<FlowNode>

  mixin FlowNodesMixin on FlowNodesBase {}
  mixin FlowNodesListMixin implements MModelList<FlowNodes>

  mixin FlowQueryMixin on FlowQueryBase {}
  mixin FlowQueryListMixin implements MModelList<FlowQuery>

  mixin FlowRepeatModeMixin on FlowRepeatModeBase {}
  mixin FlowRepeatModeListMixin implements MModelList<FlowRepeatMode>

  mixin FlowThreadMixin on FlowThreadBase {}
  mixin FlowThreadListMixin implements MModelList<FlowThread>

  mixin FlowThreadForFlowFrameMixin on FlowThreadForFlowFrameBase {}
  mixin FlowThreadForFlowFrameListMixin implements MModelList<FlowThreadForFlowFrame>

  mixin FlowThreadListMixin on FlowThreadListBase {}
  mixin FlowThreadListListMixin implements MModelList<FlowThreadList>

  mixin FlowThreadsMixin on FlowThreadsBase {}
  mixin FlowThreadsListMixin implements MModelList<FlowThreads>

  mixin FlowVertexMixin on FlowVertexBase {}
  mixin FlowVertexListMixin implements MModelList<FlowVertex>

  mixin FrameExecutionMixin on FrameExecutionBase {}
  mixin FrameExecutionListMixin implements MModelList<FrameExecution>

  mixin FrameStatusMixin on FrameStatusBase {}
  mixin FrameStatusListMixin implements MModelList<FrameStatus>

  mixin FrameVertexMixin on FrameVertexBase {}
  mixin FrameVertexListMixin implements MModelList<FrameVertex>

  mixin GetInteractionsForContactRequestMixin on GetInteractionsForContactRequestBase {}
  mixin GetInteractionsForContactRequestListMixin implements MModelList<GetInteractionsForContactRequest>

  mixin GiphyContentMixin on GiphyContentBase {}
  mixin GiphyContentListMixin implements MModelList<GiphyContent>

  mixin GiveGiftSetupMixin on GiveGiftSetupBase {}
  mixin GiveGiftSetupListMixin implements MModelList<GiveGiftSetup>

  mixin GlobalContentTemplateMixin on GlobalContentTemplateBase {}
  mixin GlobalContentTemplateListMixin implements MModelList<GlobalContentTemplate>

  mixin GlobalContentTemplateListMixin on GlobalContentTemplateListBase {}
  mixin GlobalContentTemplateListListMixin implements MModelList<GlobalContentTemplateList>

  mixin GroupFlowMixin on GroupFlowBase {}
  mixin GroupFlowListMixin implements MModelList<GroupFlow>

  mixin GroupFlowInfoMixin on GroupFlowInfoBase {}
  mixin GroupFlowInfoListMixin implements MModelList<GroupFlowInfo>

  mixin GroupFlowQueryMixin on GroupFlowQueryBase {}
  mixin GroupFlowQueryListMixin implements MModelList<GroupFlowQuery>

  mixin GroupMemberThreadStateMixin on GroupMemberThreadStateBase {}
  mixin GroupMemberThreadStateListMixin implements MModelList<GroupMemberThreadState>

  mixin GroupThreadStateMixin on GroupThreadStateBase {}
  mixin GroupThreadStateListMixin implements MModelList<GroupThreadState>

  mixin GroupThreadStateListMixin on GroupThreadStateListBase {}
  mixin GroupThreadStateListListMixin implements MModelList<GroupThreadStateList>

  mixin GroupThreadStatesMixin on GroupThreadStatesBase {}
  mixin GroupThreadStatesListMixin implements MModelList<GroupThreadStates>

  mixin IconInfoMixin on IconInfoBase {}
  mixin IconInfoListMixin implements MModelList<IconInfo>

  mixin IconTypeMixin on IconTypeBase {}
  mixin IconTypeListMixin implements MModelList<IconType>

  mixin ImageContentMixin on ImageContentBase {}
  mixin ImageContentListMixin implements MModelList<ImageContent>

  mixin IncludedPackMixin on IncludedPackBase {}
  mixin IncludedPackListMixin implements MModelList<IncludedPack>

  mixin InteractionContentMixin on InteractionContentBase {}
  mixin InteractionContentListMixin implements MModelList<InteractionContent>

  mixin JoinMixin on JoinBase {}
  mixin JoinListMixin implements MModelList<Join>

  mixin JoinRuleMixin on JoinRuleBase {}
  mixin JoinRuleListMixin implements MModelList<JoinRule>

  mixin LayoutContentMixin on LayoutContentBase {}
  mixin LayoutContentListMixin implements MModelList<LayoutContent>

  mixin LinkContentMixin on LinkContentBase {}
  mixin LinkContentListMixin implements MModelList<LinkContent>

  mixin LiteralExpressionMixin on LiteralExpressionBase {}
  mixin LiteralExpressionListMixin implements MModelList<LiteralExpression>

  mixin LocaleMixin on LocaleBase {}
  mixin LocaleListMixin implements MModelList<Locale>

  mixin ManualEntryContentMixin on ManualEntryContentBase {}
  mixin ManualEntryContentListMixin implements MModelList<ManualEntryContent>

  mixin NamedExpressionMixin on NamedExpressionBase {}
  mixin NamedExpressionListMixin implements MModelList<NamedExpression>

  mixin OrientationMixin on OrientationBase {}
  mixin OrientationListMixin implements MModelList<Orientation>

  mixin OtherSetupMixin on OtherSetupBase {}
  mixin OtherSetupListMixin implements MModelList<OtherSetup>

  mixin PackSummariesMixin on PackSummariesBase {}
  mixin PackSummariesListMixin implements MModelList<PackSummaries>

  mixin PackSummaryMixin on PackSummaryBase {}
  mixin PackSummaryListMixin implements MModelList<PackSummary>

  mixin PackSummaryListMixin on PackSummaryListBase {}
  mixin PackSummaryListListMixin implements MModelList<PackSummaryList>

  mixin PauseMixin on PauseBase {}
  mixin PauseListMixin implements MModelList<Pause>

  mixin PhoneContentMixin on PhoneContentBase {}
  mixin PhoneContentListMixin implements MModelList<PhoneContent>

  mixin PrioritizeMembersRequestMixin on PrioritizeMembersRequestBase {}
  mixin PrioritizeMembersRequestListMixin implements MModelList<PrioritizeMembersRequest>

  mixin PrioritizedMemberMixin on PrioritizedMemberBase {}
  mixin PrioritizedMemberListMixin implements MModelList<PrioritizedMember>

  mixin RandomAnimationContentMixin on RandomAnimationContentBase {}
  mixin RandomAnimationContentListMixin implements MModelList<RandomAnimationContent>

  mixin RandomContentMixin on RandomContentBase {}
  mixin RandomContentListMixin implements MModelList<RandomContent>

  mixin RandomGiphyContentMixin on RandomGiphyContentBase {}
  mixin RandomGiphyContentListMixin implements MModelList<RandomGiphyContent>

  mixin RangeMixin on RangeBase {}
  mixin RangeListMixin implements MModelList<Range>

  mixin ReachOutContentMixin on ReachOutContentBase {}
  mixin ReachOutContentListMixin implements MModelList<ReachOutContent>

  mixin ReachOutDataMixin on ReachOutDataBase {}
  mixin ReachOutDataListMixin implements MModelList<ReachOutData>

  mixin ReachOutSetupMixin on ReachOutSetupBase {}
  mixin ReachOutSetupListMixin implements MModelList<ReachOutSetup>

  mixin RecurringTimeSpanMixin on RecurringTimeSpanBase {}
  mixin RecurringTimeSpanListMixin implements MModelList<RecurringTimeSpan>

  mixin RenderContextMixin on RenderContextBase {}
  mixin RenderContextListMixin implements MModelList<RenderContext>

  mixin RenderTemplatesRequestMixin on RenderTemplatesRequestBase {}
  mixin RenderTemplatesRequestListMixin implements MModelList<RenderTemplatesRequest>

  mixin ResourceFlowInfoMixin on ResourceFlowInfoBase {}
  mixin ResourceFlowInfoListMixin implements MModelList<ResourceFlowInfo>

  mixin RoutingTaskInfoMixin on RoutingTaskInfoBase {}
  mixin RoutingTaskInfoListMixin implements MModelList<RoutingTaskInfo>

  mixin ScopePathExpressionMixin on ScopePathExpressionBase {}
  mixin ScopePathExpressionListMixin implements MModelList<ScopePathExpression>

  mixin ScriptExpressionMixin on ScriptExpressionBase {}
  mixin ScriptExpressionListMixin implements MModelList<ScriptExpression>

  mixin ScriptFlowQueryMixin on ScriptFlowQueryBase {}
  mixin ScriptFlowQueryListMixin implements MModelList<ScriptFlowQuery>

  mixin ScriptLanguageMixin on ScriptLanguageBase {}
  mixin ScriptLanguageListMixin implements MModelList<ScriptLanguage>

  mixin SingleValueMixin on SingleValueBase {}
  mixin SingleValueListMixin implements MModelList<SingleValue>

  mixin SmartGroupFilterMixin on SmartGroupFilterBase {}
  mixin SmartGroupFilterListMixin implements MModelList<SmartGroupFilter>

  mixin SmartGroupFlowInfoMixin on SmartGroupFlowInfoBase {}
  mixin SmartGroupFlowInfoListMixin implements MModelList<SmartGroupFlowInfo>

  mixin SmsContentMixin on SmsContentBase {}
  mixin SmsContentListMixin implements MModelList<SmsContent>

  mixin SocialMediaContentMixin on SocialMediaContentBase {}
  mixin SocialMediaContentListMixin implements MModelList<SocialMediaContent>

  mixin SocialTypeMixin on SocialTypeBase {}
  mixin SocialTypeListMixin implements MModelList<SocialType>

  mixin StartMixin on StartBase {}
  mixin StartListMixin implements MModelList<Start>

  mixin StartFlowInfoMixin on StartFlowInfoBase {}
  mixin StartFlowInfoListMixin implements MModelList<StartFlowInfo>

  mixin StartFlowSetMixin on StartFlowSetBase {}
  mixin StartFlowSetListMixin implements MModelList<StartFlowSet>

  mixin StartThreadRequestMixin on StartThreadRequestBase {}
  mixin StartThreadRequestListMixin implements MModelList<StartThreadRequest>

  mixin SunnyBundleMixin on SunnyBundleBase {}
  mixin SunnyBundleListMixin implements MModelList<SunnyBundle>

  mixin SunnyBundleListMixin on SunnyBundleListBase {}
  mixin SunnyBundleListListMixin implements MModelList<SunnyBundleList>

  mixin SunnyBundlesMixin on SunnyBundlesBase {}
  mixin SunnyBundlesListMixin implements MModelList<SunnyBundles>

  mixin SunnyGroupMixin on SunnyGroupBase {}
  mixin SunnyGroupListMixin implements MModelList<SunnyGroup>

  mixin SunnyInteractionMixin on SunnyInteractionBase {}
  mixin SunnyInteractionListMixin implements MModelList<SunnyInteraction>

  mixin SunnyInteractionListMixin on SunnyInteractionListBase {}
  mixin SunnyInteractionListListMixin implements MModelList<SunnyInteractionList>

  mixin SunnyPublisherMixin on SunnyPublisherBase {}
  mixin SunnyPublisherListMixin implements MModelList<SunnyPublisher>

  mixin SunnyPublisherListMixin on SunnyPublisherListBase {}
  mixin SunnyPublisherListListMixin implements MModelList<SunnyPublisherList>

  mixin SunnyPublishersMixin on SunnyPublishersBase {}
  mixin SunnyPublishersListMixin implements MModelList<SunnyPublishers>

  mixin TemplateDataMixin on TemplateDataBase {}
  mixin TemplateDataListMixin implements MModelList<TemplateData>

  mixin TemplateDataForTemplateSetMixin on TemplateDataForTemplateSetBase {}
  mixin TemplateDataForTemplateSetListMixin implements MModelList<TemplateDataForTemplateSet>

  mixin TemplateDataListMixin on TemplateDataListBase {}
  mixin TemplateDataListListMixin implements MModelList<TemplateDataList>

  mixin TemplateMediumMixin on TemplateMediumBase {}
  mixin TemplateMediumListMixin implements MModelList<TemplateMedium>

  mixin TemplateRenderResultMixin on TemplateRenderResultBase {}
  mixin TemplateRenderResultListMixin implements MModelList<TemplateRenderResult>

  mixin TemplateRenderResultsMixin on TemplateRenderResultsBase {}
  mixin TemplateRenderResultsListMixin implements MModelList<TemplateRenderResults>

  mixin TemplateSetMixin on TemplateSetBase {}
  mixin TemplateSetListMixin implements MModelList<TemplateSet>

  mixin TemplateSetListMixin on TemplateSetListBase {}
  mixin TemplateSetListListMixin implements MModelList<TemplateSetList>

  mixin TextContentMixin on TextContentBase {}
  mixin TextContentListMixin implements MModelList<TextContent>

  mixin TextModeMixin on TextModeBase {}
  mixin TextModeListMixin implements MModelList<TextMode>

  mixin ThreadStatusMixin on ThreadStatusBase {}
  mixin ThreadStatusListMixin implements MModelList<ThreadStatus>

  mixin ToggleThreadStatusRequestMixin on ToggleThreadStatusRequestBase {}
  mixin ToggleThreadStatusRequestListMixin implements MModelList<ToggleThreadStatusRequest>

  mixin VideoContentMixin on VideoContentBase {}
  mixin VideoContentListMixin implements MModelList<VideoContent>

  mixin WaitPriorMixin on WaitPriorBase {}
  mixin WaitPriorListMixin implements MModelList<WaitPrior>

  mixin YoutubeContentMixin on YoutubeContentBase {}
  mixin YoutubeContentListMixin implements MModelList<YoutubeContent>



###
### API MIXINS
###
mixin AccountContentTemplateApiMixin {}
mixin AccountFlowGraphApiMixin {}
mixin ContentApiMixin {}
mixin FlowFrameApiMixin {}
mixin FlowGraphApiMixin {}
mixin FlowThreadApiMixin {}
mixin GlobalContentTemplateApiMixin {}
mixin GroupThreadStateApiMixin {}
mixin PackSummaryApiMixin {}
mixin SlickSunnyApiMixin {}
mixin SunnyBundleApiMixin {}
mixin SunnyGroupFlowApiMixin {}
mixin SunnyInteractionApiMixin {}
mixin SunnyPublisherApiMixin {}
mixin TemplateDataApiMixin {}
mixin TemplateSetApiMixin {}