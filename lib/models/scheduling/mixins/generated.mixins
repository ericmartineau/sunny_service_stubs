### AUTOGENERATED - THIS FILE IS INTENDED TO DUMP OUT MIXIN BOILERPLATE CODE.  THE BOILERPLATE CODE
### SHOULD BE COPIED OUT TO A SOURCE FILE WHEN THE MODEL IS FIRST GENERATED


mixin AttendMethodMixin on AttendMethodBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin AttendMethodListMixin implements MModelList<AttendMethod>

mixin AttendeeMixin on AttendeeBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin AttendeeListMixin implements MModelList<Attendee>

mixin AttendeeFlowThreadMixin on AttendeeFlowThreadBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin AttendeeFlowThreadListMixin implements MModelList<AttendeeFlowThread>

mixin AttendeeFlowThreadListMixin on AttendeeFlowThreadListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin AttendeeFlowThreadListListMixin implements MModelList<AttendeeFlowThreadList>

mixin AttendeeListMixin on AttendeeListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin AttendeeListListMixin implements MModelList<AttendeeList>

mixin AttendeeStatusMixin on AttendeeStatusBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin AttendeeStatusListMixin implements MModelList<AttendeeStatus>

mixin FlowFrameForFlowThreadMixin on FlowFrameForFlowThreadBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FlowFrameForFlowThreadListMixin implements MModelList<FlowFrameForFlowThread>

mixin InPersonInfoMixin on InPersonInfoBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin InPersonInfoListMixin implements MModelList<InPersonInfo>

mixin MeetingMixin on MeetingBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin MeetingListMixin implements MModelList<Meeting>

mixin MeetingFlowContainerMixin on MeetingFlowContainerBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin MeetingFlowContainerListMixin implements MModelList<MeetingFlowContainer>

mixin MeetingFlowInfoMixin on MeetingFlowInfoBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin MeetingFlowInfoListMixin implements MModelList<MeetingFlowInfo>

mixin MeetingFlowThreadMixin on MeetingFlowThreadBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin MeetingFlowThreadListMixin implements MModelList<MeetingFlowThread>

mixin MeetingFlowThreadListMixin on MeetingFlowThreadListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin MeetingFlowThreadListListMixin implements MModelList<MeetingFlowThreadList>

mixin MeetingListMixin on MeetingListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin MeetingListListMixin implements MModelList<MeetingList>

mixin MeetingReminderTaskInfoMixin on MeetingReminderTaskInfoBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin MeetingReminderTaskInfoListMixin implements MModelList<MeetingReminderTaskInfo>

mixin PhoneInfoMixin on PhoneInfoBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PhoneInfoListMixin implements MModelList<PhoneInfo>

mixin RecurringTimeSpanMixin on RecurringTimeSpanBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin RecurringTimeSpanListMixin implements MModelList<RecurringTimeSpan>

mixin WebInfoMixin on WebInfoBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin WebInfoListMixin implements MModelList<WebInfo>

mixin WebMeetingProviderMixin on WebMeetingProviderBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin WebMeetingProviderListMixin implements MModelList<WebMeetingProvider>


###
### NON-FACT MIXINS
###

  mixin AttendMethodMixin on AttendMethodBase {}
  mixin AttendMethodListMixin implements MModelList<AttendMethod>

  mixin AttendeeMixin on AttendeeBase {}
  mixin AttendeeListMixin implements MModelList<Attendee>

  mixin AttendeeFlowThreadMixin on AttendeeFlowThreadBase {}
  mixin AttendeeFlowThreadListMixin implements MModelList<AttendeeFlowThread>

  mixin AttendeeFlowThreadListMixin on AttendeeFlowThreadListBase {}
  mixin AttendeeFlowThreadListListMixin implements MModelList<AttendeeFlowThreadList>

  mixin AttendeeListMixin on AttendeeListBase {}
  mixin AttendeeListListMixin implements MModelList<AttendeeList>

  mixin AttendeeStatusMixin on AttendeeStatusBase {}
  mixin AttendeeStatusListMixin implements MModelList<AttendeeStatus>

  mixin FlowFrameForFlowThreadMixin on FlowFrameForFlowThreadBase {}
  mixin FlowFrameForFlowThreadListMixin implements MModelList<FlowFrameForFlowThread>

  mixin InPersonInfoMixin on InPersonInfoBase {}
  mixin InPersonInfoListMixin implements MModelList<InPersonInfo>

  mixin MeetingMixin on MeetingBase {}
  mixin MeetingListMixin implements MModelList<Meeting>

  mixin MeetingFlowContainerMixin on MeetingFlowContainerBase {}
  mixin MeetingFlowContainerListMixin implements MModelList<MeetingFlowContainer>

  mixin MeetingFlowInfoMixin on MeetingFlowInfoBase {}
  mixin MeetingFlowInfoListMixin implements MModelList<MeetingFlowInfo>

  mixin MeetingFlowThreadMixin on MeetingFlowThreadBase {}
  mixin MeetingFlowThreadListMixin implements MModelList<MeetingFlowThread>

  mixin MeetingFlowThreadListMixin on MeetingFlowThreadListBase {}
  mixin MeetingFlowThreadListListMixin implements MModelList<MeetingFlowThreadList>

  mixin MeetingListMixin on MeetingListBase {}
  mixin MeetingListListMixin implements MModelList<MeetingList>

  mixin MeetingReminderTaskInfoMixin on MeetingReminderTaskInfoBase {}
  mixin MeetingReminderTaskInfoListMixin implements MModelList<MeetingReminderTaskInfo>

  mixin PhoneInfoMixin on PhoneInfoBase {}
  mixin PhoneInfoListMixin implements MModelList<PhoneInfo>

  mixin RecurringTimeSpanMixin on RecurringTimeSpanBase {}
  mixin RecurringTimeSpanListMixin implements MModelList<RecurringTimeSpan>

  mixin WebInfoMixin on WebInfoBase {}
  mixin WebInfoListMixin implements MModelList<WebInfo>

  mixin WebMeetingProviderMixin on WebMeetingProviderBase {}
  mixin WebMeetingProviderListMixin implements MModelList<WebMeetingProvider>



###
### API MIXINS
###
mixin AttendeeApiMixin {}
mixin AttendeeFlowThreadApiMixin {}
mixin MeetingApiMixin {}
mixin MeetingFlowThreadApiMixin {}