// ignore_for_file: duplicate_import, unused_import, directives_ordering, unnecessary_null_comparison, unnecessary_non_null_assertion

// DO NOT EDIT THIS FILE.  IT IS GENERATED AUTOMATICALLY AND YOUR CHANGES WILL BE OVERWRITTEN

import 'package:sunny_sdk_core/model_exports.dart';
import '../scheduling_ext.dart';

import '../model/attendee.dart';
import '../model/in_person_info.dart';
import '../model/phone_info.dart';
import '../model/web_info.dart';
import 'package:sunny_sdk_core/sunny_sdk_core.dart';


abstract class IMeeting
  implements MEntity {

  static late _MeetingConstructor of;
  static late _MeetingFromJson fromJson;

  /// Property getter and setter for title: 
  String? get title;
  set title(String? title);


  /// Property getter and setter for description: 
  String? get description;
  set description(String? description);


  /// Property getter and setter for meetingImage: 
  Uri? get meetingImage;
  set meetingImage(Uri? meetingImage);


  /// Property getter and setter for discriminator: The discriminator is used to create different types of meetings, without the need to subclass them.  When used as part of an automation flow, the discriminator should match the flow's [FlowGraphId]
  /// The discriminator is used to create different types of meetings, without the need to subclass them.  When used as part of an automation flow, the discriminator should match the flow's [FlowGraphId]
  String? get discriminator;
  set discriminator(String? discriminator);


  /// Property getter and setter for organizerId: 
  String? get organizerId;
  set organizerId(String? organizerId);


  /// Property getter and setter for meetingType: A free-form type that identifies this meeting as a specific type of meeting - this may change things like notification reminders, templates, prep tasks, etc
  /// A free-form type that identifies this meeting as a specific type of meeting - this may change things like notification reminders, templates, prep tasks, etc
  String? get meetingType;
  set meetingType(String? meetingType);


  /// Property getter and setter for startDate: 
  DateTime? get startDate;
  set startDate(DateTime? startDate);


  /// Property getter and setter for durationUnit: 
  TimeUnit? get durationUnit;
  set durationUnit(TimeUnit? durationUnit);


  /// Property getter and setter for isCancelled: 
  bool? get isCancelled;
  set isCancelled(bool? isCancelled);


  /// Property getter and setter for isComplete: 
  bool? get isComplete;
  set isComplete(bool? isComplete);


  /// Property getter and setter for previousDate: In the case of a rescheduled meeting - this will contain the original date/time  as a reference in case communications should include that
  /// In the case of a rescheduled meeting - this will contain the original date/time  as a reference in case communications should include that
  DateTime? get previousDate;
  set previousDate(DateTime? previousDate);


  /// Property getter and setter for dateCreated: 
  DateTime? get dateCreated;
  set dateCreated(DateTime? dateCreated);


  /// Property getter and setter for durationAmount: 
  int? get durationAmount;
  set durationAmount(int? durationAmount);


  /// Property getter and setter for whatToExpect: 
  String? get whatToExpect;
  set whatToExpect(String? whatToExpect);


  /// Property getter and setter for inPersonInfo: 
  IInPersonInfo? get inPersonInfo;
  set inPersonInfo(IInPersonInfo? inPersonInfo);


  /// Property getter and setter for webInfo: 
  IWebInfo? get webInfo;
  set webInfo(IWebInfo? webInfo);


  /// Property getter and setter for phoneInfo: 
  IPhoneInfo? get phoneInfo;
  set phoneInfo(IPhoneInfo? phoneInfo);


  /// Property getter and setter for attendees: 
  Map<String, IAttendee>? get attendees;
  set attendees(Map<String, IAttendee>? attendees);


  @override
  String toString();
  dynamic toJson();

  @override
  operator [](key);

  @override
  operator []=(String key, value);

  @override
  void takeFrom(source);

  @override
  void takeFromMap(Map<String, dynamic>? from, {bool copyEntries = true});

  @override
  IMeeting clone();

  @override
  Set<String> get mfields => MeetingFields.values;

}

class MeetingFields {
  static const title = "title";
  static const description = "description";
  static const meetingImage = "meetingImage";
  static const discriminator = "discriminator";
  static const organizerId = "organizerId";
  static const meetingType = "meetingType";
  static const startDate = "startDate";
  static const durationUnit = "durationUnit";
  static const isCancelled = "isCancelled";
  static const isComplete = "isComplete";
  static const previousDate = "previousDate";
  static const dateCreated = "dateCreated";
  static const durationAmount = "durationAmount";
  static const whatToExpect = "whatToExpect";
  static const inPersonInfo = "inPersonInfo";
  static const webInfo = "webInfo";
  static const phoneInfo = "phoneInfo";
  static const attendees = "attendees";
  static const Set<String> values = {
    title, description, meetingImage, discriminator, organizerId, meetingType, startDate, durationUnit, isCancelled, isComplete, previousDate, dateCreated, durationAmount, whatToExpect, inPersonInfo, webInfo, phoneInfo, attendees
  };
}

class MeetingPaths {
  static const JsonPath<String> title = JsonPath.internal(["title"], "/title");
  static const JsonPath<String> description = JsonPath.internal(["description"], "/description");
  static const JsonPath<Uri> meetingImage = JsonPath.internal(["meetingImage"], "/meetingImage");
  static const JsonPath<String> discriminator = JsonPath.internal(["discriminator"], "/discriminator");
  static const JsonPath<String> organizerId = JsonPath.internal(["organizerId"], "/organizerId");
  static const JsonPath<String> meetingType = JsonPath.internal(["meetingType"], "/meetingType");
  static const JsonPath<DateTime> startDate = JsonPath.internal(["startDate"], "/startDate");
  static const JsonPath<TimeUnit> durationUnit = JsonPath.internal(["durationUnit"], "/durationUnit");
  static const JsonPath<bool> isCancelled = JsonPath.internal(["isCancelled"], "/isCancelled");
  static const JsonPath<bool> isComplete = JsonPath.internal(["isComplete"], "/isComplete");
  static const JsonPath<DateTime> previousDate = JsonPath.internal(["previousDate"], "/previousDate");
  static const JsonPath<DateTime> dateCreated = JsonPath.internal(["dateCreated"], "/dateCreated");
  static const JsonPath<int> durationAmount = JsonPath.internal(["durationAmount"], "/durationAmount");
  static const JsonPath<String> whatToExpect = JsonPath.internal(["whatToExpect"], "/whatToExpect");
  static const JsonPath<IInPersonInfo> inPersonInfo = JsonPath.internal(["inPersonInfo"], "/inPersonInfo");
  static const JsonPath<IWebInfo> webInfo = JsonPath.internal(["webInfo"], "/webInfo");
  static const JsonPath<IPhoneInfo> phoneInfo = JsonPath.internal(["phoneInfo"], "/phoneInfo");
  static const JsonPath<Map<String, IAttendee>> attendees = JsonPath.internal(["attendees"], "/attendees");
  static final Set<JsonPath> values = {
    title, description, meetingImage, discriminator, organizerId, meetingType, startDate, durationUnit, isCancelled, isComplete, previousDate, dateCreated, durationAmount, whatToExpect, inPersonInfo, webInfo, phoneInfo, attendees
  };
}


const MeetingRef = MSchemaRef("sunny", "scheduling", "meeting", "0.0.1", "mverse");

typedef _MeetingConstructor = IMeeting Function({   required String? title, 
  String? description, 
  Uri? meetingImage, 
  String? discriminator, 
  required String? organizerId, 
  String? meetingType, 
  required DateTime? startDate, 
  required TimeUnit? durationUnit, 
  required bool? isCancelled, 
  required bool? isComplete, 
  DateTime? previousDate, 
  required DateTime? dateCreated, 
  required int? durationAmount, 
  String? whatToExpect, 
  IInPersonInfo? inPersonInfo, 
  IWebInfo? webInfo, 
  IPhoneInfo? phoneInfo, 
  required Map<String, IAttendee>? attendees
 });
typedef _MeetingFromJson = IMeeting Function(dynamic any);