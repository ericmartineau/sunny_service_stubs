// ignore_for_file: duplicate_import, unused_import, directives_ordering, unnecessary_null_comparison, unnecessary_non_null_assertion

// DO NOT EDIT THIS FILE.  IT IS GENERATED AUTOMATICALLY AND YOUR CHANGES WILL BE OVERWRITTEN

import 'package:sunny_sdk_core/model_exports.dart';

import '../model/fact_agent.dart';
import '../model/fact_recurrence.dart';
import '../model/remindable_info.dart';
import '../model/time_sensitivity.dart';
import 'package:sunny_dart/json.dart';
import 'package:sunny_sdk_core/sunny_sdk_core.dart';


abstract class IFactMetaDate implements MModel {
  /// Property getter and setter for path: 
  JsonPath? get path;
  

  /// Property getter and setter for verb: 
  String? get verb;
  

  /// Property getter and setter for label: 
  String? get label;
  

  /// Property getter and setter for factRef: 
  MSchemaRef? get factRef;
  

  /// Property getter and setter for isFlexible: 
  bool? get isFlexible;
  

  /// Property getter and setter for remindableInfo: 
  IRemindableInfo? get remindableInfo;
  

  /// Property getter and setter for agent: 
  IFactAgent? get agent;
  

  /// Property getter and setter for timeSensitivity: 
  ITimeSensitivity? get timeSensitivity;
  

  /// Property getter and setter for followUpLabel: 
  String? get followUpLabel;
  

  /// Property getter and setter for priority: 
  int? get priority;
  

  /// Property getter and setter for isHistorical: 
  bool? get isHistorical;
  

  /// Property getter and setter for isFuture: 
  bool? get isFuture;
  

  /// Property getter and setter for isStart: 
  bool? get isStart;
  

  /// Property getter and setter for isEnd: 
  bool? get isEnd;
  

  /// Property getter and setter for isExpiration: 
  bool? get isExpiration;
  

  /// Property getter and setter for isTimestamp: 
  bool? get isTimestamp;
  

  /// Property getter and setter for hasTime: 
  bool? get hasTime;
  

  /// Property getter and setter for recurs: 
  IFactRecurrence? get recurs;
  

  /// Property getter and setter for dateTokens: 
  List<String>? get dateTokens;
  

  @override
  String toString();
  dynamic toJson();

  @override
  operator [](key);

  @override
  operator []=(String key, value);

  @override
  void takeFrom(source);

  @override
  void takeFromMap(Map<String, dynamic>? from, {bool copyEntries = true});

  @override
  IFactMetaDate clone();

  @override
  Set<String> get mfields => FactMetaDateFields.values;

}

class FactMetaDateFields {
  
  static const path = "path";
  static const verb = "verb";
  static const label = "label";
  static const factRef = "factRef";
  static const isFlexible = "isFlexible";
  static const remindableInfo = "remindableInfo";
  static const agent = "agent";
  static const timeSensitivity = "timeSensitivity";
  static const followUpLabel = "followUpLabel";
  static const priority = "priority";
  static const isHistorical = "isHistorical";
  static const isFuture = "isFuture";
  static const isStart = "isStart";
  static const isEnd = "isEnd";
  static const isExpiration = "isExpiration";
  static const isTimestamp = "isTimestamp";
  static const hasTime = "hasTime";
  static const recurs = "recurs";
  static const dateTokens = "dateTokens";
  static const Set<String> values = {
    path, verb, label, factRef, isFlexible, remindableInfo, agent, timeSensitivity, followUpLabel, priority, isHistorical, isFuture, isStart, isEnd, isExpiration, isTimestamp, hasTime, recurs, dateTokens
  };
}

class FactMetaDatePaths {
  
  static const JsonPath<JsonPath> path = JsonPath.internal(["path"], "/path");
  static const JsonPath<String> verb = JsonPath.internal(["verb"], "/verb");
  static const JsonPath<String> label = JsonPath.internal(["label"], "/label");
  static const JsonPath<MSchemaRef> factRef = JsonPath.internal(["factRef"], "/factRef");
  static const JsonPath<bool> isFlexible = JsonPath.internal(["isFlexible"], "/isFlexible");
  static const JsonPath<IRemindableInfo> remindableInfo = JsonPath.internal(["remindableInfo"], "/remindableInfo");
  static const JsonPath<IFactAgent> agent = JsonPath.internal(["agent"], "/agent");
  static const JsonPath<ITimeSensitivity> timeSensitivity = JsonPath.internal(["timeSensitivity"], "/timeSensitivity");
  static const JsonPath<String> followUpLabel = JsonPath.internal(["followUpLabel"], "/followUpLabel");
  static const JsonPath<int> priority = JsonPath.internal(["priority"], "/priority");
  static const JsonPath<bool> isHistorical = JsonPath.internal(["isHistorical"], "/isHistorical");
  static const JsonPath<bool> isFuture = JsonPath.internal(["isFuture"], "/isFuture");
  static const JsonPath<bool> isStart = JsonPath.internal(["isStart"], "/isStart");
  static const JsonPath<bool> isEnd = JsonPath.internal(["isEnd"], "/isEnd");
  static const JsonPath<bool> isExpiration = JsonPath.internal(["isExpiration"], "/isExpiration");
  static const JsonPath<bool> isTimestamp = JsonPath.internal(["isTimestamp"], "/isTimestamp");
  static const JsonPath<bool> hasTime = JsonPath.internal(["hasTime"], "/hasTime");
  static const JsonPath<IFactRecurrence> recurs = JsonPath.internal(["recurs"], "/recurs");
  static const JsonPath<List<String>> dateTokens = JsonPath.internal(["dateTokens"], "/dateTokens");
  static final Set<JsonPath> values = {
    path, verb, label, factRef, isFlexible, remindableInfo, agent, timeSensitivity, followUpLabel, priority, isHistorical, isFuture, isStart, isEnd, isExpiration, isTimestamp, hasTime, recurs, dateTokens
  };
}


const FactMetaDateRef = MSchemaRef("sunny", "factSchema", "factMetaDate", "0.0.1", "ephemeral");