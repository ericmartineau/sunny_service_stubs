// ignore_for_file: duplicate_import, unused_import, directives_ordering, unnecessary_null_comparison, non_constant_identifier_names, unnecessary_non_null_assertion

// DO NOT EDIT THIS FILE.  IT IS GENERATED AUTOMATICALLY AND YOUR CHANGES WILL BE OVERWRITTEN

import 'package:sunny_sdk_core/model_exports.dart';
import '../fact_schemas_ext.dart';

import '../model/fact_agent.dart';
import '../model/fact_recurrence.dart';
import '../model/remindable_info.dart';
import '../model/time_sensitivity.dart';
import 'package:sunny_dart/json.dart';
import 'package:sunny_sdk_core/sunny_sdk_core.dart';


abstract class IFactMetaDate
  implements MModel {

  static late _FactMetaDateConstructor of;
  static late _FactMetaDateFromJson fromJson;

  /// Property getter and setter for path: 
  JsonPath? get path;
  set path(JsonPath? path);


  /// Property getter and setter for verb: 
  String? get verb;
  set verb(String? verb);


  /// Property getter and setter for label: 
  String? get label;
  set label(String? label);


  /// Property getter and setter for factRef: 
  MSchemaRef? get factRef;
  set factRef(MSchemaRef? factRef);


  /// Property getter and setter for isFlexible: 
  bool? get isFlexible;
  set isFlexible(bool? isFlexible);


  /// Property getter and setter for remindableInfo: 
  IRemindableInfo? get remindableInfo;
  set remindableInfo(IRemindableInfo? remindableInfo);


  /// Property getter and setter for agent: 
  IFactAgent? get agent;
  set agent(IFactAgent? agent);


  /// Property getter and setter for timeSensitivity: 
  ITimeSensitivity? get timeSensitivity;
  set timeSensitivity(ITimeSensitivity? timeSensitivity);


  /// Property getter and setter for followUpLabel: 
  String? get followUpLabel;
  set followUpLabel(String? followUpLabel);


  /// Property getter and setter for priority: 
  int? get priority;
  set priority(int? priority);


  /// Property getter and setter for isHistorical: 
  bool? get isHistorical;
  set isHistorical(bool? isHistorical);


  /// Property getter and setter for isFuture: 
  bool? get isFuture;
  set isFuture(bool? isFuture);


  /// Property getter and setter for isStart: 
  bool? get isStart;
  set isStart(bool? isStart);


  /// Property getter and setter for isEnd: 
  bool? get isEnd;
  set isEnd(bool? isEnd);


  /// Property getter and setter for isExpiration: 
  bool? get isExpiration;
  set isExpiration(bool? isExpiration);


  /// Property getter and setter for isTimestamp: 
  bool? get isTimestamp;
  set isTimestamp(bool? isTimestamp);


  /// Property getter and setter for hasTime: 
  bool? get hasTime;
  set hasTime(bool? hasTime);


  /// Property getter and setter for recurs: 
  IFactRecurrence? get recurs;
  set recurs(IFactRecurrence? recurs);


  /// Property getter and setter for dateTokens: 
  List<String>? get dateTokens;
  set dateTokens(List<String>? dateTokens);


  @override
  String toString();
  dynamic toJson();

  @override
  operator [](key);

  @override
  operator []=(String key, value);

  @override
  void takeFrom(source);

  @override
  void takeFromMap(Map<String, dynamic>? from, {bool copyEntries = true});

  @override
  IFactMetaDate clone();

  @override
  Set<String> get mfields => FactMetaDateFields.values;

}

class FactMetaDateFields {
  static const path = "path";
  static const verb = "verb";
  static const label = "label";
  static const factRef = "factRef";
  static const isFlexible = "isFlexible";
  static const remindableInfo = "remindableInfo";
  static const agent = "agent";
  static const timeSensitivity = "timeSensitivity";
  static const followUpLabel = "followUpLabel";
  static const priority = "priority";
  static const isHistorical = "isHistorical";
  static const isFuture = "isFuture";
  static const isStart = "isStart";
  static const isEnd = "isEnd";
  static const isExpiration = "isExpiration";
  static const isTimestamp = "isTimestamp";
  static const hasTime = "hasTime";
  static const recurs = "recurs";
  static const dateTokens = "dateTokens";
  static const Set<String> values = {
    path, verb, label, factRef, isFlexible, remindableInfo, agent, timeSensitivity, followUpLabel, priority, isHistorical, isFuture, isStart, isEnd, isExpiration, isTimestamp, hasTime, recurs, dateTokens
  };
}

class FactMetaDatePaths {
  static const JsonPath<JsonPath> path = JsonPath.internal(["path"], "/path");
  static const JsonPath<String> verb = JsonPath.internal(["verb"], "/verb");
  static const JsonPath<String> label = JsonPath.internal(["label"], "/label");
  static const JsonPath<MSchemaRef> factRef = JsonPath.internal(["factRef"], "/factRef");
  static const JsonPath<bool> isFlexible = JsonPath.internal(["isFlexible"], "/isFlexible");
  static const JsonPath<IRemindableInfo> remindableInfo = JsonPath.internal(["remindableInfo"], "/remindableInfo");
  static const JsonPath<IFactAgent> agent = JsonPath.internal(["agent"], "/agent");
  static const JsonPath<ITimeSensitivity> timeSensitivity = JsonPath.internal(["timeSensitivity"], "/timeSensitivity");
  static const JsonPath<String> followUpLabel = JsonPath.internal(["followUpLabel"], "/followUpLabel");
  static const JsonPath<int> priority = JsonPath.internal(["priority"], "/priority");
  static const JsonPath<bool> isHistorical = JsonPath.internal(["isHistorical"], "/isHistorical");
  static const JsonPath<bool> isFuture = JsonPath.internal(["isFuture"], "/isFuture");
  static const JsonPath<bool> isStart = JsonPath.internal(["isStart"], "/isStart");
  static const JsonPath<bool> isEnd = JsonPath.internal(["isEnd"], "/isEnd");
  static const JsonPath<bool> isExpiration = JsonPath.internal(["isExpiration"], "/isExpiration");
  static const JsonPath<bool> isTimestamp = JsonPath.internal(["isTimestamp"], "/isTimestamp");
  static const JsonPath<bool> hasTime = JsonPath.internal(["hasTime"], "/hasTime");
  static const JsonPath<IFactRecurrence> recurs = JsonPath.internal(["recurs"], "/recurs");
  static const JsonPath<List<String>> dateTokens = JsonPath.internal(["dateTokens"], "/dateTokens");
  static final Set<JsonPath> values = {
    path, verb, label, factRef, isFlexible, remindableInfo, agent, timeSensitivity, followUpLabel, priority, isHistorical, isFuture, isStart, isEnd, isExpiration, isTimestamp, hasTime, recurs, dateTokens
  };
}


const FactMetaDateRef = MSchemaRef("sunny", "factSchema", "factMetaDate", "0.0.1", "ephemeral");

typedef _FactMetaDateConstructor = IFactMetaDate Function({   required JsonPath? path, 
  required String? verb, 
  String? label, 
  required MSchemaRef? factRef, 
  required bool? isFlexible, 
  IRemindableInfo? remindableInfo, 
  required IFactAgent? agent, 
  ITimeSensitivity? timeSensitivity, 
  String? followUpLabel, 
  int? priority, 
  required bool? isHistorical, 
  required bool? isFuture, 
  required bool? isStart, 
  required bool? isEnd, 
  required bool? isExpiration, 
  required bool? isTimestamp, 
  required bool? hasTime, 
  IFactRecurrence? recurs, 
  required List<String>? dateTokens
 });
typedef _FactMetaDateFromJson = IFactMetaDate Function(dynamic any);