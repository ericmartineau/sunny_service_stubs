### AUTOGENERATED - THIS FILE IS INTENDED TO DUMP OUT MIXIN BOILERPLATE CODE.  THE BOILERPLATE CODE
### SHOULD BE COPIED OUT TO A SOURCE FILE WHEN THE MODEL IS FIRST GENERATED


mixin MessageBodyMixin on MessageBodyBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin MessageBodyListMixin implements MModelList<MessageBody>

mixin NotificationMixin on NotificationBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin NotificationListMixin implements MModelList<Notification>

mixin PushContentBodyMixin on PushContentBodyBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PushContentBodyListMixin implements MModelList<PushContentBody>

mixin PushDisplayTypeMixin on PushDisplayTypeBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PushDisplayTypeListMixin implements MModelList<PushDisplayType>

mixin PushEventsBodyMixin on PushEventsBodyBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PushEventsBodyListMixin implements MModelList<PushEventsBody>

mixin PushMessageMixin on PushMessageBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PushMessageListMixin implements MModelList<PushMessage>

mixin PushMessageTypeMixin on PushMessageTypeBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PushMessageTypeListMixin implements MModelList<PushMessageType>

mixin PushUrlBodyMixin on PushUrlBodyBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PushUrlBodyListMixin implements MModelList<PushUrlBody>

mixin SendResponseMixin on SendResponseBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin SendResponseListMixin implements MModelList<SendResponse>

mixin SendResponseItemMixin on SendResponseItemBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin SendResponseItemListMixin implements MModelList<SendResponseItem>


###
### NON-FACT MIXINS
###

  mixin MessageBodyMixin on MessageBodyBase {}
  mixin MessageBodyListMixin implements MModelList<MessageBody>

  mixin NotificationMixin on NotificationBase {}
  mixin NotificationListMixin implements MModelList<Notification>

  mixin PushContentBodyMixin on PushContentBodyBase {}
  mixin PushContentBodyListMixin implements MModelList<PushContentBody>

  mixin PushDisplayTypeMixin on PushDisplayTypeBase {}
  mixin PushDisplayTypeListMixin implements MModelList<PushDisplayType>

  mixin PushEventsBodyMixin on PushEventsBodyBase {}
  mixin PushEventsBodyListMixin implements MModelList<PushEventsBody>

  mixin PushMessageMixin on PushMessageBase {}
  mixin PushMessageListMixin implements MModelList<PushMessage>

  mixin PushMessageTypeMixin on PushMessageTypeBase {}
  mixin PushMessageTypeListMixin implements MModelList<PushMessageType>

  mixin PushUrlBodyMixin on PushUrlBodyBase {}
  mixin PushUrlBodyListMixin implements MModelList<PushUrlBody>

  mixin SendResponseMixin on SendResponseBase {}
  mixin SendResponseListMixin implements MModelList<SendResponse>

  mixin SendResponseItemMixin on SendResponseItemBase {}
  mixin SendResponseItemListMixin implements MModelList<SendResponseItem>



###
### API MIXINS
###
mixin PushMessageApiMixin {}