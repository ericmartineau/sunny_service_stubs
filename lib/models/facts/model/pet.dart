// ignore_for_file: duplicate_import, unused_import, directives_ordering, unnecessary_null_comparison, non_constant_identifier_names, unnecessary_non_null_assertion

// DO NOT EDIT THIS FILE.  IT IS GENERATED AUTOMATICALLY AND YOUR CHANGES WILL BE OVERWRITTEN

import 'package:sunny_sdk_core/model_exports.dart';
import '../facts_ext.dart';

import '../model/fact.dart';
import '../model/task_fact_for_m_model.dart';
import 'package:sunny_service_stubs/models/reliveit/model/relive_it_contact.dart';
import 'package:sunny_service_stubs/models/waypoints/model/image_content.dart';


abstract class IPet
  implements IFact {

  static late _PetConstructor of;
  static late _PetFromJson fromJson;

  /// Property getter and setter for contactKey: 
  MKey? get contactKey;
  set contactKey(MKey? contactKey);


  /// Property getter and setter for birthday: 
  FlexiDate? get birthday;
  set birthday(FlexiDate? birthday);


  /// Property getter and setter for name: 
  String? get name;
  set name(String? name);


  /// Property getter and setter for photos: 
  List<IImageContent>? get photos;
  set photos(List<IImageContent>? photos);


  /// Property getter and setter for petType: 
  String? get petType;
  set petType(String? petType);


  /// Property getter and setter for info: 
  String? get info;
  set info(String? info);


  @override
  String toString();
  dynamic toJson();

  @override
  operator [](key);

  @override
  operator []=(String key, value);

  @override
  void takeFrom(source);

  @override
  void takeFromMap(Map<String, dynamic>? from, {bool copyEntries = true});

  @override
  IPet clone();

  @override
  Set<String> get mfields => PetFields.values;

}

class PetFields {
  static const creator = "creator";
  static const dateCreated = "dateCreated";
  static const assistedTask = "assistedTask";
  static const contactKey = "contactKey";
  static const birthday = "birthday";
  static const name = "name";
  static const photos = "photos";
  static const petType = "petType";
  static const info = "info";
  static const Set<String> values = {
    creator, dateCreated, assistedTask, contactKey, birthday, name, photos, petType, info
  };
}

class PetPaths {
  static const JsonPath<IReliveItContact> creator = JsonPath.internal(["creator"], "/creator");
  static const JsonPath<DateTime> dateCreated = JsonPath.internal(["dateCreated"], "/dateCreated");
  static const JsonPath<ITaskFactForMModel> assistedTask = JsonPath.internal(["assistedTask"], "/assistedTask");
  static const JsonPath<MKey> contactKey = JsonPath.internal(["contactKey"], "/contactKey");
  static const JsonPath<FlexiDate> birthday = JsonPath.internal(["birthday"], "/birthday");
  static const JsonPath<String> name = JsonPath.internal(["name"], "/name");
  static const JsonPath<List<IImageContent>> photos = JsonPath.internal(["photos"], "/photos");
  static const JsonPath<String> petType = JsonPath.internal(["petType"], "/petType");
  static const JsonPath<String> info = JsonPath.internal(["info"], "/info");
  static final Set<JsonPath> values = {
    creator, dateCreated, assistedTask, contactKey, birthday, name, photos, petType, info
  };
}


const PetRef = MSchemaRef("sunny", "fact", "pet", "0.0.1", "mverse");

typedef _PetConstructor = IPet Function({   IReliveItContact? creator, 
  required DateTime? dateCreated, 
  ITaskFactForMModel? assistedTask, 
  required MKey? contactKey, 
  FlexiDate? birthday, 
  required String? name, 
  List<IImageContent>? photos, 
  String? petType, 
  String? info
 });
typedef _PetFromJson = IPet Function(dynamic any);