// ignore_for_file: duplicate_import, unused_import, directives_ordering, unnecessary_null_comparison, unnecessary_non_null_assertion

// DO NOT EDIT THIS FILE.  IT IS GENERATED AUTOMATICALLY AND YOUR CHANGES WILL BE OVERWRITTEN

import 'package:sunny_sdk_core/model_exports.dart';

import '../../contact_v2/model/physical_location.dart';
import '../../reliveit/model/relive_it_contact.dart';
import '../../waypoints/model/image_content.dart';
import '../../waypoints/model/video_content.dart';
import '../model/fact.dart';
import '../model/task_fact_for_m_model.dart';
import 'package:sunny_sdk_core/sunny_sdk_core.dart';


abstract class IMemory implements IFact {
  /// Property getter and setter for contactKeys: 
  List<MKey>? get contactKeys;
  

  /// Property getter and setter for possessions: 
  List<MKey>? get possessions;
  

  /// Property getter and setter for organizations: 
  List<MKey>? get organizations;
  

  /// Property getter and setter for pets: 
  List<MKey>? get pets;
  

  /// Property getter and setter for traditions: 
  List<MKey>? get traditions;
  

  /// Property getter and setter for traits: 
  List<MKey>? get traits;
  

  /// Property getter and setter for memoryDate: 
  FlexiDate? get memoryDate;
  

  /// Property getter and setter for memory: 
  String? get memory;
  

  /// Property getter and setter for photos: 
  List<IImageContent>? get photos;
  

  /// Property getter and setter for videos: 
  List<IVideoContent>? get videos;
  

  /// Property getter and setter for location: 
  IPhysicalLocation? get location;
  

  /// Property getter and setter for details: 
  String? get details;
  

  @override
  String toString();
  dynamic toJson();

  @override
  operator [](key);

  @override
  operator []=(String key, value);

  @override
  void takeFrom(source);

  @override
  void takeFromMap(Map<String, dynamic>? from, {bool copyEntries = true});

  @override
  IMemory clone();

  @override
  Set<String> get mfields => MemoryFields.values;

}

class MemoryFields {
  
  static const creator = "creator";
  static const dateCreated = "dateCreated";
  static const assistedTask = "assistedTask";
  static const contactKeys = "contactKeys";
  static const possessions = "possessions";
  static const organizations = "organizations";
  static const pets = "pets";
  static const traditions = "traditions";
  static const traits = "traits";
  static const memoryDate = "memoryDate";
  static const memory = "memory";
  static const photos = "photos";
  static const videos = "videos";
  static const location = "location";
  static const details = "details";
  static const Set<String> values = {
    creator, dateCreated, assistedTask, contactKeys, possessions, organizations, pets, traditions, traits, memoryDate, memory, photos, videos, location, details
  };
}

class MemoryPaths {
  
  static const JsonPath<IReliveItContact> creator = JsonPath.internal(["creator"], "/creator");
  static const JsonPath<DateTime> dateCreated = JsonPath.internal(["dateCreated"], "/dateCreated");
  static const JsonPath<ITaskFactForMModel> assistedTask = JsonPath.internal(["assistedTask"], "/assistedTask");
  static const JsonPath<List<MKey>> contactKeys = JsonPath.internal(["contactKeys"], "/contactKeys");
  static const JsonPath<List<MKey>> possessions = JsonPath.internal(["possessions"], "/possessions");
  static const JsonPath<List<MKey>> organizations = JsonPath.internal(["organizations"], "/organizations");
  static const JsonPath<List<MKey>> pets = JsonPath.internal(["pets"], "/pets");
  static const JsonPath<List<MKey>> traditions = JsonPath.internal(["traditions"], "/traditions");
  static const JsonPath<List<MKey>> traits = JsonPath.internal(["traits"], "/traits");
  static const JsonPath<FlexiDate> memoryDate = JsonPath.internal(["memoryDate"], "/memoryDate");
  static const JsonPath<String> memory = JsonPath.internal(["memory"], "/memory");
  static const JsonPath<List<IImageContent>> photos = JsonPath.internal(["photos"], "/photos");
  static const JsonPath<List<IVideoContent>> videos = JsonPath.internal(["videos"], "/videos");
  static const JsonPath<IPhysicalLocation> location = JsonPath.internal(["location"], "/location");
  static const JsonPath<String> details = JsonPath.internal(["details"], "/details");
  static final Set<JsonPath> values = {
    creator, dateCreated, assistedTask, contactKeys, possessions, organizations, pets, traditions, traits, memoryDate, memory, photos, videos, location, details
  };
}


const MemoryRef = MSchemaRef("sunny", "fact", "memory", "0.0.1", "mverse");