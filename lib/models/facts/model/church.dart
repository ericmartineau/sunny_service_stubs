// ignore_for_file: duplicate_import, unused_import, directives_ordering, unnecessary_null_comparison, non_constant_identifier_names, unnecessary_non_null_assertion

// DO NOT EDIT THIS FILE.  IT IS GENERATED AUTOMATICALLY AND YOUR CHANGES WILL BE OVERWRITTEN

import 'package:sunny_sdk_core/model_exports.dart';
import '../facts_ext.dart';

import '../model/organization.dart';
import '../model/phase.dart';
import 'package:sunny_service_stubs/models/contact_v2/model/physical_location.dart';
import 'package:sunny_service_stubs/models/waypoints/model/image_content.dart';


abstract class IChurch
  implements IOrganization {

  static late _ChurchConstructor of;
  static late _ChurchFromJson fromJson;

  /// Property getter and setter for religion: 
  String? get religion;
  set religion(String? religion);


  /// Property getter and setter for address: 
  IPhysicalLocation? get address;
  set address(IPhysicalLocation? address);


  /// Property getter and setter for leader: 
  MKey? get leader;
  set leader(MKey? leader);


  @override
  String toString();
  dynamic toJson();

  @override
  operator [](key);

  @override
  operator []=(String key, value);

  @override
  void takeFrom(source);

  @override
  void takeFromMap(Map<String, dynamic>? from, {bool copyEntries = true});

  @override
  IChurch clone();

  @override
  Set<String> get mfields => ChurchFields.values;

}

class ChurchFields {
  static const name = "name";
  static const logo = "logo";
  static const phases = "phases";
  static const parent = "parent";
  static const religion = "religion";
  static const address = "address";
  static const leader = "leader";
  static const Set<String> values = {
    name, logo, phases, parent, religion, address, leader
  };
}

class ChurchPaths {
  static const JsonPath<String> name = JsonPath.internal(["name"], "/name");
  static const JsonPath<IImageContent> logo = JsonPath.internal(["logo"], "/logo");
  static const JsonPath<List<IPhase>> phases = JsonPath.internal(["phases"], "/phases");
  static const JsonPath<List<MKey>> parent = JsonPath.internal(["parent"], "/parent");
  static const JsonPath<String> religion = JsonPath.internal(["religion"], "/religion");
  static const JsonPath<IPhysicalLocation> address = JsonPath.internal(["address"], "/address");
  static const JsonPath<MKey> leader = JsonPath.internal(["leader"], "/leader");
  static final Set<JsonPath> values = {
    name, logo, phases, parent, religion, address, leader
  };
}


const ChurchRef = MSchemaRef("sunny", "fact", "church", "0.0.1", "mverse");

typedef _ChurchConstructor = IChurch Function({   required String? name, 
  IImageContent? logo, 
  List<IPhase>? phases, 
  required List<MKey>? parent, 
  String? religion, 
  IPhysicalLocation? address, 
  MKey? leader
 });
typedef _ChurchFromJson = IChurch Function(dynamic any);