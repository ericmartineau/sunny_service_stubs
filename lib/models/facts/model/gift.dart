// ignore_for_file: duplicate_import, unused_import, directives_ordering, unnecessary_null_comparison, unnecessary_non_null_assertion

// DO NOT EDIT THIS FILE.  IT IS GENERATED AUTOMATICALLY AND YOUR CHANGES WILL BE OVERWRITTEN

import 'package:sunny_sdk_core/model_exports.dart';
import '../facts_ext.dart';

import '../model/fact.dart';
import '../model/task_fact_for_m_model.dart';
import 'package:sunny_sdk_core/sunny_sdk_core.dart';
import 'package:sunny_service_stubs/models/reliveit/model/relive_it_contact.dart';


abstract class IGift
  implements IFact {

  static late _GiftConstructor of;
  static late _GiftFromJson fromJson;

  /// Property getter and setter for occasion: 
  String? get occasion;
  set occasion(String? occasion);


  /// Property getter and setter for gift: 
  String? get gift;
  set gift(String? gift);


  /// Property getter and setter for notes: 
  String? get notes;
  set notes(String? notes);


  /// Property getter and setter for giftDate: 
  DateTime? get giftDate;
  set giftDate(DateTime? giftDate);


  /// Property getter and setter for gifteeKeys: 
  List<MKey>? get gifteeKeys;
  set gifteeKeys(List<MKey>? gifteeKeys);


  /// Property getter and setter for recipientKey: 
  MKey? get recipientKey;
  set recipientKey(MKey? recipientKey);


  @override
  String toString();
  dynamic toJson();

  @override
  operator [](key);

  @override
  operator []=(String key, value);

  @override
  void takeFrom(source);

  @override
  void takeFromMap(Map<String, dynamic>? from, {bool copyEntries = true});

  @override
  IGift clone();

  @override
  Set<String> get mfields => GiftFields.values;

}

class GiftFields {
  static const creator = "creator";
  static const dateCreated = "dateCreated";
  static const assistedTask = "assistedTask";
  static const occasion = "occasion";
  static const gift = "gift";
  static const notes = "notes";
  static const giftDate = "giftDate";
  static const gifteeKeys = "gifteeKeys";
  static const recipientKey = "recipientKey";
  static const Set<String> values = {
    creator, dateCreated, assistedTask, occasion, gift, notes, giftDate, gifteeKeys, recipientKey
  };
}

class GiftPaths {
  static const JsonPath<IReliveItContact> creator = JsonPath.internal(["creator"], "/creator");
  static const JsonPath<DateTime> dateCreated = JsonPath.internal(["dateCreated"], "/dateCreated");
  static const JsonPath<ITaskFactForMModel> assistedTask = JsonPath.internal(["assistedTask"], "/assistedTask");
  static const JsonPath<String> occasion = JsonPath.internal(["occasion"], "/occasion");
  static const JsonPath<String> gift = JsonPath.internal(["gift"], "/gift");
  static const JsonPath<String> notes = JsonPath.internal(["notes"], "/notes");
  static const JsonPath<DateTime> giftDate = JsonPath.internal(["giftDate"], "/giftDate");
  static const JsonPath<List<MKey>> gifteeKeys = JsonPath.internal(["gifteeKeys"], "/gifteeKeys");
  static const JsonPath<MKey> recipientKey = JsonPath.internal(["recipientKey"], "/recipientKey");
  static final Set<JsonPath> values = {
    creator, dateCreated, assistedTask, occasion, gift, notes, giftDate, gifteeKeys, recipientKey
  };
}


const GiftRef = MSchemaRef("sunny", "fact", "gift", "0.0.1", "mverse");

typedef _GiftConstructor = IGift Function({   IReliveItContact? creator, 
  required DateTime? dateCreated, 
  ITaskFactForMModel? assistedTask, 
  String? occasion, 
  required String? gift, 
  String? notes, 
  required DateTime? giftDate, 
  required List<MKey>? gifteeKeys, 
  required MKey? recipientKey
 });
typedef _GiftFromJson = IGift Function(dynamic any);