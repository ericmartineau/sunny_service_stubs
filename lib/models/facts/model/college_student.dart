// ignore_for_file: duplicate_import, unused_import, directives_ordering, unnecessary_null_comparison, non_constant_identifier_names, unnecessary_non_null_assertion

// DO NOT EDIT THIS FILE.  IT IS GENERATED AUTOMATICALLY AND YOUR CHANGES WILL BE OVERWRITTEN

import 'package:sunny_sdk_core/model_exports.dart';
import '../facts_ext.dart';

import '../model/college.dart';
import '../model/fact.dart';
import '../model/membership.dart';
import '../model/task_fact_for_m_model.dart';
import 'package:sunny_service_stubs/models/reliveit/model/relive_it_contact.dart';


abstract class ICollegeStudent
  implements IMembership {

  static late _CollegeStudentConstructor of;
  static late _CollegeStudentFromJson fromJson;

  /// Property getter and setter for contactKey: 
  MKey? get contactKey;
  set contactKey(MKey? contactKey);


  /// Property getter and setter for university: 
  ICollege? get university;
  set university(ICollege? university);


  /// Property getter and setter for focus: 
  String? get focus;
  set focus(String? focus);


  /// Property getter and setter for startDate: 
  FlexiDate? get startDate;
  set startDate(FlexiDate? startDate);


  /// Property getter and setter for endDate: 
  FlexiDate? get endDate;
  set endDate(FlexiDate? endDate);


  @override
  String toString();
  dynamic toJson();

  @override
  operator [](key);

  @override
  operator []=(String key, value);

  @override
  void takeFrom(source);

  @override
  void takeFromMap(Map<String, dynamic>? from, {bool copyEntries = true});

  @override
  ICollegeStudent clone();

  @override
  Set<String> get mfields => CollegeStudentFields.values;

}

class CollegeStudentFields {
  static const creator = "creator";
  static const dateCreated = "dateCreated";
  static const assistedTask = "assistedTask";
  static const isActive = "isActive";
  static const contactKey = "contactKey";
  static const university = "university";
  static const focus = "focus";
  static const startDate = "startDate";
  static const endDate = "endDate";
  static const Set<String> values = {
    creator, dateCreated, assistedTask, isActive, contactKey, university, focus, startDate, endDate
  };
}

class CollegeStudentPaths {
  static const JsonPath<IReliveItContact> creator = JsonPath.internal(["creator"], "/creator");
  static const JsonPath<DateTime> dateCreated = JsonPath.internal(["dateCreated"], "/dateCreated");
  static const JsonPath<ITaskFactForMModel> assistedTask = JsonPath.internal(["assistedTask"], "/assistedTask");
  static const JsonPath<bool> isActive = JsonPath.internal(["isActive"], "/isActive");
  static const JsonPath<MKey> contactKey = JsonPath.internal(["contactKey"], "/contactKey");
  static const JsonPath<ICollege> university = JsonPath.internal(["university"], "/university");
  static const JsonPath<String> focus = JsonPath.internal(["focus"], "/focus");
  static const JsonPath<FlexiDate> startDate = JsonPath.internal(["startDate"], "/startDate");
  static const JsonPath<FlexiDate> endDate = JsonPath.internal(["endDate"], "/endDate");
  static final Set<JsonPath> values = {
    creator, dateCreated, assistedTask, isActive, contactKey, university, focus, startDate, endDate
  };
}


const CollegeStudentRef = MSchemaRef("sunny", "fact", "collegeStudent", "0.0.1", "mverse");

typedef _CollegeStudentConstructor = ICollegeStudent Function({   IReliveItContact? creator, 
  required DateTime? dateCreated, 
  ITaskFactForMModel? assistedTask, 
  bool? isActive, 
  required MKey? contactKey, 
  required ICollege? university, 
  String? focus, 
  FlexiDate? startDate, 
  FlexiDate? endDate
 });
typedef _CollegeStudentFromJson = ICollegeStudent Function(dynamic any);