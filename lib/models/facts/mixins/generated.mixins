### AUTOGENERATED - THIS FILE IS INTENDED TO DUMP OUT MIXIN BOILERPLATE CODE.  THE BOILERPLATE CODE
### SHOULD BE COPIED OUT TO A SOURCE FILE WHEN THE MODEL IS FIRST GENERATED


mixin AssistedTaskMixin on AssistedTaskBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin AssistedTaskListMixin implements MModelList<AssistedTask>

mixin AssistedTaskListMixin on AssistedTaskListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin AssistedTaskListListMixin implements MModelList<AssistedTaskList>

mixin AssistedTasksMixin on AssistedTasksBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin AssistedTasksListMixin implements MModelList<AssistedTasks>

mixin BirthdayMixin on BirthdayBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin BirthdayListMixin implements MModelList<Birthday>

mixin BirthdayListMixin on BirthdayListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin BirthdayListListMixin implements MModelList<BirthdayList>

mixin BookClubMixin on BookClubBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin BookClubListMixin implements MModelList<BookClub>

mixin BookClubListMixin on BookClubListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin BookClubListListMixin implements MModelList<BookClubList>

mixin BookClubMemberMixin on BookClubMemberBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin BookClubMemberListMixin implements MModelList<BookClubMember>

mixin BookClubMemberListMixin on BookClubMemberListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin BookClubMemberListListMixin implements MModelList<BookClubMemberList>

mixin ChurchMixin on ChurchBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ChurchListMixin implements MModelList<Church>

mixin ChurchListMixin on ChurchListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ChurchListListMixin implements MModelList<ChurchList>

mixin CollegeMixin on CollegeBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin CollegeListMixin implements MModelList<College>

mixin CollegeListMixin on CollegeListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin CollegeListListMixin implements MModelList<CollegeList>

mixin CollegeStudentMixin on CollegeStudentBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin CollegeStudentListMixin implements MModelList<CollegeStudent>

mixin CollegeStudentListMixin on CollegeStudentListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin CollegeStudentListListMixin implements MModelList<CollegeStudentList>

mixin CongregantMixin on CongregantBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin CongregantListMixin implements MModelList<Congregant>

mixin CongregantListMixin on CongregantListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin CongregantListListMixin implements MModelList<CongregantList>

mixin ContactExtendedPropsMixin on ContactExtendedPropsBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ContactExtendedPropsListMixin implements MModelList<ContactExtendedProps>

mixin ContactExtendedPropsListMixin on ContactExtendedPropsListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ContactExtendedPropsListListMixin implements MModelList<ContactExtendedPropsList>

mixin ContactInterestsMixin on ContactInterestsBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ContactInterestsListMixin implements MModelList<ContactInterests>

mixin ContactInterestsListMixin on ContactInterestsListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ContactInterestsListListMixin implements MModelList<ContactInterestsList>

mixin DimensionsMixin on DimensionsBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin DimensionsListMixin implements MModelList<Dimensions>

mixin EmployeeMixin on EmployeeBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin EmployeeListMixin implements MModelList<Employee>

mixin EmployeeListMixin on EmployeeListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin EmployeeListListMixin implements MModelList<EmployeeList>

mixin EmployerMixin on EmployerBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin EmployerListMixin implements MModelList<Employer>

mixin EmployerListMixin on EmployerListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin EmployerListListMixin implements MModelList<EmployerList>

mixin EventBasedDueConfigMixin on EventBasedDueConfigBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin EventBasedDueConfigListMixin implements MModelList<EventBasedDueConfig>

mixin EventTypeMixin on EventTypeBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin EventTypeListMixin implements MModelList<EventType>

mixin ExpressionDueConfigMixin on ExpressionDueConfigBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ExpressionDueConfigListMixin implements MModelList<ExpressionDueConfig>

mixin FactMixin on FactBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FactListMixin implements MModelList<Fact>

mixin FactListMixin on FactListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FactListListMixin implements MModelList<FactList>

mixin FactsMixin on FactsBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FactsListMixin implements MModelList<Facts>

mixin FamilyMixin on FamilyBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FamilyListMixin implements MModelList<Family>

mixin FamilyAssociationMixin on FamilyAssociationBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FamilyAssociationListMixin implements MModelList<FamilyAssociation>

mixin FamilyAssociationListMixin on FamilyAssociationListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FamilyAssociationListListMixin implements MModelList<FamilyAssociationList>

mixin FamilyListMixin on FamilyListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin FamilyListListMixin implements MModelList<FamilyList>

mixin GenderMixin on GenderBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin GenderListMixin implements MModelList<Gender>

mixin GiftMixin on GiftBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin GiftListMixin implements MModelList<Gift>

mixin GiftListMixin on GiftListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin GiftListListMixin implements MModelList<GiftList>

mixin HometownMixin on HometownBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin HometownListMixin implements MModelList<Hometown>

mixin HometownListMixin on HometownListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin HometownListListMixin implements MModelList<HometownList>

mixin MembershipMixin on MembershipBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin MembershipListMixin implements MModelList<Membership>

mixin MembershipListMixin on MembershipListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin MembershipListListMixin implements MModelList<MembershipList>

mixin MemoryMixin on MemoryBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin MemoryListMixin implements MModelList<Memory>

mixin MemoryListMixin on MemoryListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin MemoryListListMixin implements MModelList<MemoryList>

mixin MetaDateDueConfigMixin on MetaDateDueConfigBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin MetaDateDueConfigListMixin implements MModelList<MetaDateDueConfig>

mixin MilestoneMixin on MilestoneBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin MilestoneListMixin implements MModelList<Milestone>

mixin MilestoneListMixin on MilestoneListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin MilestoneListListMixin implements MModelList<MilestoneList>

mixin NoteMixin on NoteBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin NoteListMixin implements MModelList<Note>

mixin NoteListMixin on NoteListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin NoteListListMixin implements MModelList<NoteList>

mixin OrganizationMixin on OrganizationBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin OrganizationListMixin implements MModelList<Organization>

mixin OrganizationListMixin on OrganizationListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin OrganizationListListMixin implements MModelList<OrganizationList>

mixin OrientationMixin on OrientationBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin OrientationListMixin implements MModelList<Orientation>

mixin OwesMoneyMixin on OwesMoneyBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin OwesMoneyListMixin implements MModelList<OwesMoney>

mixin OwesMoneyListMixin on OwesMoneyListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin OwesMoneyListListMixin implements MModelList<OwesMoneyList>

mixin PaymentMixin on PaymentBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PaymentListMixin implements MModelList<Payment>

mixin PaymentListMixin on PaymentListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PaymentListListMixin implements MModelList<PaymentList>

mixin PetMixin on PetBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PetListMixin implements MModelList<Pet>

mixin PetListMixin on PetListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PetListListMixin implements MModelList<PetList>

mixin PhaseMixin on PhaseBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PhaseListMixin implements MModelList<Phase>

mixin PhaseListMixin on PhaseListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PhaseListListMixin implements MModelList<PhaseList>

mixin PhoneWithExtensionMixin on PhoneWithExtensionBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PhoneWithExtensionListMixin implements MModelList<PhoneWithExtension>

mixin PlayerMixin on PlayerBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PlayerListMixin implements MModelList<Player>

mixin PlayerListMixin on PlayerListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PlayerListListMixin implements MModelList<PlayerList>

mixin PossessionMixin on PossessionBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PossessionListMixin implements MModelList<Possession>

mixin PossessionListMixin on PossessionListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PossessionListListMixin implements MModelList<PossessionList>

mixin PrepSchoolMixin on PrepSchoolBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PrepSchoolListMixin implements MModelList<PrepSchool>

mixin PrepSchoolListMixin on PrepSchoolListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PrepSchoolListListMixin implements MModelList<PrepSchoolList>

mixin PrepSchoolStudentMixin on PrepSchoolStudentBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PrepSchoolStudentListMixin implements MModelList<PrepSchoolStudent>

mixin PrepSchoolStudentListMixin on PrepSchoolStudentListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin PrepSchoolStudentListListMixin implements MModelList<PrepSchoolStudentList>

mixin ReactionMixin on ReactionBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ReactionListMixin implements MModelList<Reaction>

mixin ReactionListMixin on ReactionListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ReactionListListMixin implements MModelList<ReactionList>

mixin RecurrenceMixin on RecurrenceBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin RecurrenceListMixin implements MModelList<Recurrence>

mixin RecurringTimeSpanMixin on RecurringTimeSpanBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin RecurringTimeSpanListMixin implements MModelList<RecurringTimeSpan>

mixin RememberMixin on RememberBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin RememberListMixin implements MModelList<Remember>

mixin RememberListMixin on RememberListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin RememberListListMixin implements MModelList<RememberList>

mixin SmartDateDueConfigMixin on SmartDateDueConfigBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin SmartDateDueConfigListMixin implements MModelList<SmartDateDueConfig>

mixin TaskDueConfigMixin on TaskDueConfigBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin TaskDueConfigListMixin implements MModelList<TaskDueConfig>

mixin TaskFactMixin on TaskFactBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin TaskFactListMixin implements MModelList<TaskFact>

mixin TaskFactForMModelMixin on TaskFactForMModelBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin TaskFactForMModelListMixin implements MModelList<TaskFactForMModel>

mixin TaskFactListMixin on TaskFactListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin TaskFactListListMixin implements MModelList<TaskFactList>

mixin TeamMixin on TeamBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin TeamListMixin implements MModelList<Team>

mixin TeamListMixin on TeamListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin TeamListListMixin implements MModelList<TeamList>

mixin TimeSensitivityMixin on TimeSensitivityBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin TimeSensitivityListMixin implements MModelList<TimeSensitivity>

mixin TraditionMixin on TraditionBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin TraditionListMixin implements MModelList<Tradition>

mixin TraditionListMixin on TraditionListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin TraditionListListMixin implements MModelList<TraditionList>

mixin TraitMixin on TraitBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin TraitListMixin implements MModelList<Trait>

mixin TraitListMixin on TraitListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin TraitListListMixin implements MModelList<TraitList>


###
### NON-FACT MIXINS
###

  mixin AssistedTaskMixin on AssistedTaskBase {}
  mixin AssistedTaskListMixin implements MModelList<AssistedTask>

  mixin AssistedTaskListMixin on AssistedTaskListBase {}
  mixin AssistedTaskListListMixin implements MModelList<AssistedTaskList>

  mixin AssistedTasksMixin on AssistedTasksBase {}
  mixin AssistedTasksListMixin implements MModelList<AssistedTasks>

  mixin BirthdayMixin on BirthdayBase {}
  mixin BirthdayListMixin implements MModelList<Birthday>

  mixin BirthdayListMixin on BirthdayListBase {}
  mixin BirthdayListListMixin implements MModelList<BirthdayList>

  mixin BookClubMixin on BookClubBase {}
  mixin BookClubListMixin implements MModelList<BookClub>

  mixin BookClubListMixin on BookClubListBase {}
  mixin BookClubListListMixin implements MModelList<BookClubList>

  mixin BookClubMemberMixin on BookClubMemberBase {}
  mixin BookClubMemberListMixin implements MModelList<BookClubMember>

  mixin BookClubMemberListMixin on BookClubMemberListBase {}
  mixin BookClubMemberListListMixin implements MModelList<BookClubMemberList>

  mixin ChurchMixin on ChurchBase {}
  mixin ChurchListMixin implements MModelList<Church>

  mixin ChurchListMixin on ChurchListBase {}
  mixin ChurchListListMixin implements MModelList<ChurchList>

  mixin CollegeMixin on CollegeBase {}
  mixin CollegeListMixin implements MModelList<College>

  mixin CollegeListMixin on CollegeListBase {}
  mixin CollegeListListMixin implements MModelList<CollegeList>

  mixin CollegeStudentMixin on CollegeStudentBase {}
  mixin CollegeStudentListMixin implements MModelList<CollegeStudent>

  mixin CollegeStudentListMixin on CollegeStudentListBase {}
  mixin CollegeStudentListListMixin implements MModelList<CollegeStudentList>

  mixin CongregantMixin on CongregantBase {}
  mixin CongregantListMixin implements MModelList<Congregant>

  mixin CongregantListMixin on CongregantListBase {}
  mixin CongregantListListMixin implements MModelList<CongregantList>

  mixin ContactExtendedPropsMixin on ContactExtendedPropsBase {}
  mixin ContactExtendedPropsListMixin implements MModelList<ContactExtendedProps>

  mixin ContactExtendedPropsListMixin on ContactExtendedPropsListBase {}
  mixin ContactExtendedPropsListListMixin implements MModelList<ContactExtendedPropsList>

  mixin ContactInterestsMixin on ContactInterestsBase {}
  mixin ContactInterestsListMixin implements MModelList<ContactInterests>

  mixin ContactInterestsListMixin on ContactInterestsListBase {}
  mixin ContactInterestsListListMixin implements MModelList<ContactInterestsList>

  mixin DimensionsMixin on DimensionsBase {}
  mixin DimensionsListMixin implements MModelList<Dimensions>

  mixin EmployeeMixin on EmployeeBase {}
  mixin EmployeeListMixin implements MModelList<Employee>

  mixin EmployeeListMixin on EmployeeListBase {}
  mixin EmployeeListListMixin implements MModelList<EmployeeList>

  mixin EmployerMixin on EmployerBase {}
  mixin EmployerListMixin implements MModelList<Employer>

  mixin EmployerListMixin on EmployerListBase {}
  mixin EmployerListListMixin implements MModelList<EmployerList>

  mixin EventBasedDueConfigMixin on EventBasedDueConfigBase {}
  mixin EventBasedDueConfigListMixin implements MModelList<EventBasedDueConfig>

  mixin EventTypeMixin on EventTypeBase {}
  mixin EventTypeListMixin implements MModelList<EventType>

  mixin ExpressionDueConfigMixin on ExpressionDueConfigBase {}
  mixin ExpressionDueConfigListMixin implements MModelList<ExpressionDueConfig>

  mixin FactMixin on FactBase {}
  mixin FactListMixin implements MModelList<Fact>

  mixin FactListMixin on FactListBase {}
  mixin FactListListMixin implements MModelList<FactList>

  mixin FactsMixin on FactsBase {}
  mixin FactsListMixin implements MModelList<Facts>

  mixin FamilyMixin on FamilyBase {}
  mixin FamilyListMixin implements MModelList<Family>

  mixin FamilyAssociationMixin on FamilyAssociationBase {}
  mixin FamilyAssociationListMixin implements MModelList<FamilyAssociation>

  mixin FamilyAssociationListMixin on FamilyAssociationListBase {}
  mixin FamilyAssociationListListMixin implements MModelList<FamilyAssociationList>

  mixin FamilyListMixin on FamilyListBase {}
  mixin FamilyListListMixin implements MModelList<FamilyList>

  mixin GenderMixin on GenderBase {}
  mixin GenderListMixin implements MModelList<Gender>

  mixin GiftMixin on GiftBase {}
  mixin GiftListMixin implements MModelList<Gift>

  mixin GiftListMixin on GiftListBase {}
  mixin GiftListListMixin implements MModelList<GiftList>

  mixin HometownMixin on HometownBase {}
  mixin HometownListMixin implements MModelList<Hometown>

  mixin HometownListMixin on HometownListBase {}
  mixin HometownListListMixin implements MModelList<HometownList>

  mixin MembershipMixin on MembershipBase {}
  mixin MembershipListMixin implements MModelList<Membership>

  mixin MembershipListMixin on MembershipListBase {}
  mixin MembershipListListMixin implements MModelList<MembershipList>

  mixin MemoryMixin on MemoryBase {}
  mixin MemoryListMixin implements MModelList<Memory>

  mixin MemoryListMixin on MemoryListBase {}
  mixin MemoryListListMixin implements MModelList<MemoryList>

  mixin MetaDateDueConfigMixin on MetaDateDueConfigBase {}
  mixin MetaDateDueConfigListMixin implements MModelList<MetaDateDueConfig>

  mixin MilestoneMixin on MilestoneBase {}
  mixin MilestoneListMixin implements MModelList<Milestone>

  mixin MilestoneListMixin on MilestoneListBase {}
  mixin MilestoneListListMixin implements MModelList<MilestoneList>

  mixin NoteMixin on NoteBase {}
  mixin NoteListMixin implements MModelList<Note>

  mixin NoteListMixin on NoteListBase {}
  mixin NoteListListMixin implements MModelList<NoteList>

  mixin OrganizationMixin on OrganizationBase {}
  mixin OrganizationListMixin implements MModelList<Organization>

  mixin OrganizationListMixin on OrganizationListBase {}
  mixin OrganizationListListMixin implements MModelList<OrganizationList>

  mixin OrientationMixin on OrientationBase {}
  mixin OrientationListMixin implements MModelList<Orientation>

  mixin OwesMoneyMixin on OwesMoneyBase {}
  mixin OwesMoneyListMixin implements MModelList<OwesMoney>

  mixin OwesMoneyListMixin on OwesMoneyListBase {}
  mixin OwesMoneyListListMixin implements MModelList<OwesMoneyList>

  mixin PaymentMixin on PaymentBase {}
  mixin PaymentListMixin implements MModelList<Payment>

  mixin PaymentListMixin on PaymentListBase {}
  mixin PaymentListListMixin implements MModelList<PaymentList>

  mixin PetMixin on PetBase {}
  mixin PetListMixin implements MModelList<Pet>

  mixin PetListMixin on PetListBase {}
  mixin PetListListMixin implements MModelList<PetList>

  mixin PhaseMixin on PhaseBase {}
  mixin PhaseListMixin implements MModelList<Phase>

  mixin PhaseListMixin on PhaseListBase {}
  mixin PhaseListListMixin implements MModelList<PhaseList>

  mixin PhoneWithExtensionMixin on PhoneWithExtensionBase {}
  mixin PhoneWithExtensionListMixin implements MModelList<PhoneWithExtension>

  mixin PlayerMixin on PlayerBase {}
  mixin PlayerListMixin implements MModelList<Player>

  mixin PlayerListMixin on PlayerListBase {}
  mixin PlayerListListMixin implements MModelList<PlayerList>

  mixin PossessionMixin on PossessionBase {}
  mixin PossessionListMixin implements MModelList<Possession>

  mixin PossessionListMixin on PossessionListBase {}
  mixin PossessionListListMixin implements MModelList<PossessionList>

  mixin PrepSchoolMixin on PrepSchoolBase {}
  mixin PrepSchoolListMixin implements MModelList<PrepSchool>

  mixin PrepSchoolListMixin on PrepSchoolListBase {}
  mixin PrepSchoolListListMixin implements MModelList<PrepSchoolList>

  mixin PrepSchoolStudentMixin on PrepSchoolStudentBase {}
  mixin PrepSchoolStudentListMixin implements MModelList<PrepSchoolStudent>

  mixin PrepSchoolStudentListMixin on PrepSchoolStudentListBase {}
  mixin PrepSchoolStudentListListMixin implements MModelList<PrepSchoolStudentList>

  mixin ReactionMixin on ReactionBase {}
  mixin ReactionListMixin implements MModelList<Reaction>

  mixin ReactionListMixin on ReactionListBase {}
  mixin ReactionListListMixin implements MModelList<ReactionList>

  mixin RecurrenceMixin on RecurrenceBase {}
  mixin RecurrenceListMixin implements MModelList<Recurrence>

  mixin RecurringTimeSpanMixin on RecurringTimeSpanBase {}
  mixin RecurringTimeSpanListMixin implements MModelList<RecurringTimeSpan>

  mixin RememberMixin on RememberBase {}
  mixin RememberListMixin implements MModelList<Remember>

  mixin RememberListMixin on RememberListBase {}
  mixin RememberListListMixin implements MModelList<RememberList>

  mixin SmartDateDueConfigMixin on SmartDateDueConfigBase {}
  mixin SmartDateDueConfigListMixin implements MModelList<SmartDateDueConfig>

  mixin TaskDueConfigMixin on TaskDueConfigBase {}
  mixin TaskDueConfigListMixin implements MModelList<TaskDueConfig>

  mixin TaskFactMixin on TaskFactBase {}
  mixin TaskFactListMixin implements MModelList<TaskFact>

  mixin TaskFactForMModelMixin on TaskFactForMModelBase {}
  mixin TaskFactForMModelListMixin implements MModelList<TaskFactForMModel>

  mixin TaskFactListMixin on TaskFactListBase {}
  mixin TaskFactListListMixin implements MModelList<TaskFactList>

  mixin TeamMixin on TeamBase {}
  mixin TeamListMixin implements MModelList<Team>

  mixin TeamListMixin on TeamListBase {}
  mixin TeamListListMixin implements MModelList<TeamList>

  mixin TimeSensitivityMixin on TimeSensitivityBase {}
  mixin TimeSensitivityListMixin implements MModelList<TimeSensitivity>

  mixin TraditionMixin on TraditionBase {}
  mixin TraditionListMixin implements MModelList<Tradition>

  mixin TraditionListMixin on TraditionListBase {}
  mixin TraditionListListMixin implements MModelList<TraditionList>

  mixin TraitMixin on TraitBase {}
  mixin TraitListMixin implements MModelList<Trait>

  mixin TraitListMixin on TraitListBase {}
  mixin TraitListListMixin implements MModelList<TraitList>



###
### API MIXINS
###
mixin AssistedTaskApiMixin {}
mixin BirthdayApiMixin {}
mixin BookClubApiMixin {}
mixin BookClubMemberApiMixin {}
mixin ChurchApiMixin {}
mixin CollegeApiMixin {}
mixin CollegeStudentApiMixin {}
mixin CongregantApiMixin {}
mixin ContactExtendedPropsApiMixin {}
mixin ContactInterestsApiMixin {}
mixin EmployeeApiMixin {}
mixin EmployerApiMixin {}
mixin FactApiMixin {}
mixin FamilyApiMixin {}
mixin FamilyAssociationApiMixin {}
mixin GiftApiMixin {}
mixin HometownApiMixin {}
mixin MembershipApiMixin {}
mixin MemoryApiMixin {}
mixin MilestoneApiMixin {}
mixin NoteApiMixin {}
mixin OrganizationApiMixin {}
mixin OwesMoneyApiMixin {}
mixin PaymentApiMixin {}
mixin PetApiMixin {}
mixin PhaseApiMixin {}
mixin PlayerApiMixin {}
mixin PossessionApiMixin {}
mixin PrepSchoolApiMixin {}
mixin PrepSchoolStudentApiMixin {}
mixin ReactionApiMixin {}
mixin RememberApiMixin {}
mixin TaskFactApiMixin {}
mixin TeamApiMixin {}
mixin TraditionApiMixin {}
mixin TraitApiMixin {}