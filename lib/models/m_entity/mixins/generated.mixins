### AUTOGENERATED - THIS FILE IS INTENDED TO DUMP OUT MIXIN BOILERPLATE CODE.  THE BOILERPLATE CODE
### SHOULD BE COPIED OUT TO A SOURCE FILE WHEN THE MODEL IS FIRST GENERATED


mixin EmbeddedPropertyMixin on EmbeddedPropertyBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin EmbeddedPropertyListMixin implements MModelList<EmbeddedProperty>

mixin EntityListPropertyMixin on EntityListPropertyBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin EntityListPropertyListMixin implements MModelList<EntityListProperty>

mixin ListPropertyMixin on ListPropertyBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin ListPropertyListMixin implements MModelList<ListProperty>

mixin LookupResultMixin on LookupResultBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin LookupResultListMixin implements MModelList<LookupResult>

mixin LookupResultsMixin on LookupResultsBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin LookupResultsListMixin implements MModelList<LookupResults>

mixin MEntityDefinitionMixin on MEntityDefinitionBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin MEntityDefinitionListMixin implements MModelList<MEntityDefinition>

mixin MModuleDefinitionMixin on MModuleDefinitionBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin MModuleDefinitionListMixin implements MModelList<MModuleDefinition>

mixin MOperationDefinitionMixin on MOperationDefinitionBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin MOperationDefinitionListMixin implements MModelList<MOperationDefinition>

mixin MOperationDefinitionListMixin on MOperationDefinitionListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin MOperationDefinitionListListMixin implements MModelList<MOperationDefinitionList>

mixin MRefSchemaDefinitionMixin on MRefSchemaDefinitionBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin MRefSchemaDefinitionListMixin implements MModelList<MRefSchemaDefinition>

mixin MSchemaDefinitionMixin on MSchemaDefinitionBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin MSchemaDefinitionListMixin implements MModelList<MSchemaDefinition>

mixin MSchemaDefinitionListMixin on MSchemaDefinitionListBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin MSchemaDefinitionListListMixin implements MModelList<MSchemaDefinitionList>

mixin MSchemaPropertyMixin on MSchemaPropertyBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin MSchemaPropertyListMixin implements MModelList<MSchemaProperty>

mixin RefPropertyMixin on RefPropertyBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin RefPropertyListMixin implements MModelList<RefProperty>

mixin StringSelectPropertyMixin on StringSelectPropertyBase {
  // If this model is a fact, use some of these overrides
  set contactKey(MKey contactKey) {
    this.mycontactField = contactKey;
  }

  MKey get contactKey => mycontactField;

  @mustCallSuper
  initialize(MKey targetKey, MKey agentKey) {
    super.initialize(targetKey, agentKey);
    // Add any extra initialization options
  }

  String title(Contact contact) {
    return "TODO: Render a title for this fact";
  }

  String subtitle(Contact contact) {
    return "TODO: Render a subtitle for this fact";
  }
}

mixin StringSelectPropertyListMixin implements MModelList<StringSelectProperty>


###
### NON-FACT MIXINS
###

  mixin EmbeddedPropertyMixin on EmbeddedPropertyBase {}
  mixin EmbeddedPropertyListMixin implements MModelList<EmbeddedProperty>

  mixin EntityListPropertyMixin on EntityListPropertyBase {}
  mixin EntityListPropertyListMixin implements MModelList<EntityListProperty>

  mixin ListPropertyMixin on ListPropertyBase {}
  mixin ListPropertyListMixin implements MModelList<ListProperty>

  mixin LookupResultMixin on LookupResultBase {}
  mixin LookupResultListMixin implements MModelList<LookupResult>

  mixin LookupResultsMixin on LookupResultsBase {}
  mixin LookupResultsListMixin implements MModelList<LookupResults>

  mixin MEntityDefinitionMixin on MEntityDefinitionBase {}
  mixin MEntityDefinitionListMixin implements MModelList<MEntityDefinition>

  mixin MModuleDefinitionMixin on MModuleDefinitionBase {}
  mixin MModuleDefinitionListMixin implements MModelList<MModuleDefinition>

  mixin MOperationDefinitionMixin on MOperationDefinitionBase {}
  mixin MOperationDefinitionListMixin implements MModelList<MOperationDefinition>

  mixin MOperationDefinitionListMixin on MOperationDefinitionListBase {}
  mixin MOperationDefinitionListListMixin implements MModelList<MOperationDefinitionList>

  mixin MRefSchemaDefinitionMixin on MRefSchemaDefinitionBase {}
  mixin MRefSchemaDefinitionListMixin implements MModelList<MRefSchemaDefinition>

  mixin MSchemaDefinitionMixin on MSchemaDefinitionBase {}
  mixin MSchemaDefinitionListMixin implements MModelList<MSchemaDefinition>

  mixin MSchemaDefinitionListMixin on MSchemaDefinitionListBase {}
  mixin MSchemaDefinitionListListMixin implements MModelList<MSchemaDefinitionList>

  mixin MSchemaPropertyMixin on MSchemaPropertyBase {}
  mixin MSchemaPropertyListMixin implements MModelList<MSchemaProperty>

  mixin RefPropertyMixin on RefPropertyBase {}
  mixin RefPropertyListMixin implements MModelList<RefProperty>

  mixin StringSelectPropertyMixin on StringSelectPropertyBase {}
  mixin StringSelectPropertyListMixin implements MModelList<StringSelectProperty>



###
### API MIXINS
###