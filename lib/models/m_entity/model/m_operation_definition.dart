// ignore_for_file: duplicate_import, unused_import, directives_ordering, unnecessary_null_comparison, unnecessary_non_null_assertion

// DO NOT EDIT THIS FILE.  IT IS GENERATED AUTOMATICALLY AND YOUR CHANGES WILL BE OVERWRITTEN

import 'package:sunny_sdk_core/model_exports.dart';

import '../model/m_schema_definition.dart';
import 'package:sunny_sdk_core/sunny_sdk_core.dart';


abstract class IMOperationDefinition implements MModel {
  /// Property getter and setter for operationRef: 
  MOperationRef? get operationRef;
  set operationRef(MOperationRef? operationRef);

  /// Property getter and setter for implements_: 
  MOperationRef? get implements_;
  set implements_(MOperationRef? implements_);

  /// Property getter and setter for owningType: 
  MSchemaRef? get owningType;
  set owningType(MSchemaRef? owningType);

  /// Property getter and setter for operationLabel: 
  String? get operationLabel;
  set operationLabel(String? operationLabel);

  /// Property getter and setter for operationDescription: 
  String? get operationDescription;
  set operationDescription(String? operationDescription);

  /// Property getter and setter for isAssisted: 
  bool? get isAssisted;
  set isAssisted(bool? isAssisted);

  /// Property getter and setter for isVirtual: 
  bool? get isVirtual;
  set isVirtual(bool? isVirtual);

  /// Property getter and setter for realm: 
  String? get realm;
  set realm(String? realm);

  /// Property getter and setter for requiredTokens: 
  List<String>? get requiredTokens;
  set requiredTokens(List<String>? requiredTokens);

  /// Property getter and setter for inputSchema: 
  IMSchemaDefinition? get inputSchema;
  set inputSchema(IMSchemaDefinition? inputSchema);

  /// Property getter and setter for outputSchema: 
  IMSchemaDefinition? get outputSchema;
  set outputSchema(IMSchemaDefinition? outputSchema);

  /// Property getter and setter for initSchema: 
  IMSchemaDefinition? get initSchema;
  set initSchema(IMSchemaDefinition? initSchema);

  @override
  String toString();
  dynamic toJson();

  @override
  operator [](key);

  @override
  operator []=(String key, value);

  @override
  void takeFrom(source);

  @override
  void takeFromMap(Map<String, dynamic>? from, {bool copyEntries = true});

  @override
  IMOperationDefinition clone();

  @override
  Set<String> get mfields => MOperationDefinitionFields.values;

}

class MOperationDefinitionFields {
  
  static const operationRef = "operationRef";
  static const implements_ = "implements_";
  static const owningType = "owningType";
  static const operationLabel = "operationLabel";
  static const operationDescription = "operationDescription";
  static const isAssisted = "isAssisted";
  static const isVirtual = "isVirtual";
  static const realm = "realm";
  static const requiredTokens = "requiredTokens";
  static const inputSchema = "inputSchema";
  static const outputSchema = "outputSchema";
  static const initSchema = "initSchema";
  static const Set<String> values = {
    operationRef, implements_, owningType, operationLabel, operationDescription, isAssisted, isVirtual, realm, requiredTokens, inputSchema, outputSchema, initSchema
  };
}

class MOperationDefinitionPaths {
  
  static const JsonPath<MOperationRef> operationRef = JsonPath.internal(["operationRef"], "/operationRef");
  static const JsonPath<MOperationRef> implements_ = JsonPath.internal(["implements_"], "/implements_");
  static const JsonPath<MSchemaRef> owningType = JsonPath.internal(["owningType"], "/owningType");
  static const JsonPath<String> operationLabel = JsonPath.internal(["operationLabel"], "/operationLabel");
  static const JsonPath<String> operationDescription = JsonPath.internal(["operationDescription"], "/operationDescription");
  static const JsonPath<bool> isAssisted = JsonPath.internal(["isAssisted"], "/isAssisted");
  static const JsonPath<bool> isVirtual = JsonPath.internal(["isVirtual"], "/isVirtual");
  static const JsonPath<String> realm = JsonPath.internal(["realm"], "/realm");
  static const JsonPath<List<String>> requiredTokens = JsonPath.internal(["requiredTokens"], "/requiredTokens");
  static const JsonPath<IMSchemaDefinition> inputSchema = JsonPath.internal(["inputSchema"], "/inputSchema");
  static const JsonPath<IMSchemaDefinition> outputSchema = JsonPath.internal(["outputSchema"], "/outputSchema");
  static const JsonPath<IMSchemaDefinition> initSchema = JsonPath.internal(["initSchema"], "/initSchema");
  static final Set<JsonPath> values = {
    operationRef, implements_, owningType, operationLabel, operationDescription, isAssisted, isVirtual, realm, requiredTokens, inputSchema, outputSchema, initSchema
  };
}


const MOperationDefinitionRef = MSchemaRef("mverse", "mthing", "mOperationDefinition", "0.0.1", "ephemeral");