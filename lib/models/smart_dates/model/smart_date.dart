// ignore_for_file: duplicate_import, unused_import, directives_ordering, unnecessary_null_comparison, non_constant_identifier_names, unnecessary_non_null_assertion

// DO NOT EDIT THIS FILE.  IT IS GENERATED AUTOMATICALLY AND YOUR CHANGES WILL BE OVERWRITTEN

import 'package:sunny_sdk_core/model_exports.dart';
import '../smart_dates_ext.dart';

import '../model/relative_date.dart';
import '../model/smart_date.dart';


abstract class ISmartDate
  implements MModel {

  static late _SmartDateConstructor of;
  static late _SmartDateFromJson fromJson;

  /// Property getter and setter for parseStart: 
  int? get parseStart;
  set parseStart(int? parseStart);


  /// Property getter and setter for parseEnd: 
  int? get parseEnd;
  set parseEnd(int? parseEnd);


  /// Property getter and setter for relativeDate: 
  IRelativeDate? get relativeDate;
  set relativeDate(IRelativeDate? relativeDate);


  /// Property getter and setter for isDateInferred: 
  bool? get isDateInferred;
  set isDateInferred(bool? isDateInferred);


  /// Property getter and setter for isTimeInferred: 
  bool? get isTimeInferred;
  set isTimeInferred(bool? isTimeInferred);


  /// Property getter and setter for isRecurring: 
  bool? get isRecurring;
  set isRecurring(bool? isRecurring);


  /// Property getter and setter for recursUntil: 
  ISmartDate? get recursUntil;
  set recursUntil(ISmartDate? recursUntil);


  /// Property getter and setter for dates: 
  List<DateTime>? get dates;
  set dates(List<DateTime>? dates);


  @override
  String toString();
  dynamic toJson();

  @override
  operator [](key);

  @override
  operator []=(String key, value);

  @override
  void takeFrom(source);

  @override
  void takeFromMap(Map<String, dynamic>? from, {bool copyEntries = true});

  @override
  ISmartDate clone();

  @override
  Set<String> get mfields => SmartDateFields.values;

}

class SmartDateFields {
  static const parseStart = "parseStart";
  static const parseEnd = "parseEnd";
  static const relativeDate = "relativeDate";
  static const isDateInferred = "isDateInferred";
  static const isTimeInferred = "isTimeInferred";
  static const isRecurring = "isRecurring";
  static const recursUntil = "recursUntil";
  static const dates = "dates";
  static const Set<String> values = {
    parseStart, parseEnd, relativeDate, isDateInferred, isTimeInferred, isRecurring, recursUntil, dates
  };
}

class SmartDatePaths {
  static const JsonPath<int> parseStart = JsonPath.internal(["parseStart"], "/parseStart");
  static const JsonPath<int> parseEnd = JsonPath.internal(["parseEnd"], "/parseEnd");
  static const JsonPath<IRelativeDate> relativeDate = JsonPath.internal(["relativeDate"], "/relativeDate");
  static const JsonPath<bool> isDateInferred = JsonPath.internal(["isDateInferred"], "/isDateInferred");
  static const JsonPath<bool> isTimeInferred = JsonPath.internal(["isTimeInferred"], "/isTimeInferred");
  static const JsonPath<bool> isRecurring = JsonPath.internal(["isRecurring"], "/isRecurring");
  static const JsonPath<ISmartDate> recursUntil = JsonPath.internal(["recursUntil"], "/recursUntil");
  static const JsonPath<List<DateTime>> dates = JsonPath.internal(["dates"], "/dates");
  static final Set<JsonPath> values = {
    parseStart, parseEnd, relativeDate, isDateInferred, isTimeInferred, isRecurring, recursUntil, dates
  };
}


const SmartDateRef = MSchemaRef("mverse", "smartDates", "smartDate", "0.0.1", "ephemeral");

typedef _SmartDateConstructor = ISmartDate Function({   required int? parseStart, 
  required int? parseEnd, 
  IRelativeDate? relativeDate, 
  required bool? isDateInferred, 
  required bool? isTimeInferred, 
  required bool? isRecurring, 
  ISmartDate? recursUntil, 
  required List<DateTime>? dates
 });
typedef _SmartDateFromJson = ISmartDate Function(dynamic any);