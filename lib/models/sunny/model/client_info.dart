// ignore_for_file: duplicate_import, unused_import, directives_ordering, unnecessary_null_comparison, unnecessary_non_null_assertion

// DO NOT EDIT THIS FILE.  IT IS GENERATED AUTOMATICALLY AND YOUR CHANGES WILL BE OVERWRITTEN

import 'package:sunny_sdk_core/model_exports.dart';
import '../sunny_ext.dart';



abstract class IClientInfo
  implements MModel {

  static late _ClientInfoConstructor of;
  static late _ClientInfoFromJson fromJson;

  /// Property getter and setter for type: 
  String? get type;
  set type(String? type);


  /// Property getter and setter for dateInstalled: 
  DateTime? get dateInstalled;
  set dateInstalled(DateTime? dateInstalled);


  /// Property getter and setter for dateUpdated: 
  DateTime? get dateUpdated;
  set dateUpdated(DateTime? dateUpdated);


  /// Property getter and setter for timeZone: 
  String? get timeZone;
  set timeZone(String? timeZone);


  /// Property getter and setter for locale: 
  String? get locale;
  set locale(String? locale);


  /// Property getter and setter for installationIdentifier: 
  String? get installationIdentifier;
  set installationIdentifier(String? installationIdentifier);


  /// Property getter and setter for appIdentifier: 
  String? get appIdentifier;
  set appIdentifier(String? appIdentifier);


  /// Property getter and setter for appVersion: 
  String? get appVersion;
  set appVersion(String? appVersion);


  /// Property getter and setter for deviceToken: 
  String? get deviceToken;
  set deviceToken(String? deviceToken);


  @override
  String toString();
  dynamic toJson();

  @override
  operator [](key);

  @override
  operator []=(String key, value);

  @override
  void takeFrom(source);

  @override
  void takeFromMap(Map<String, dynamic>? from, {bool copyEntries = true});

  @override
  IClientInfo clone();

  @override
  Set<String> get mfields => ClientInfoFields.values;

}

class ClientInfoFields {
  static const type = "type";
  static const dateInstalled = "dateInstalled";
  static const dateUpdated = "dateUpdated";
  static const timeZone = "timeZone";
  static const locale = "locale";
  static const installationIdentifier = "installationIdentifier";
  static const appIdentifier = "appIdentifier";
  static const appVersion = "appVersion";
  static const deviceToken = "deviceToken";
  static const Set<String> values = {
    type, dateInstalled, dateUpdated, timeZone, locale, installationIdentifier, appIdentifier, appVersion, deviceToken
  };
}

class ClientInfoPaths {
  static const JsonPath<String> type = JsonPath.internal(["type"], "/type");
  static const JsonPath<DateTime> dateInstalled = JsonPath.internal(["dateInstalled"], "/dateInstalled");
  static const JsonPath<DateTime> dateUpdated = JsonPath.internal(["dateUpdated"], "/dateUpdated");
  static const JsonPath<String> timeZone = JsonPath.internal(["timeZone"], "/timeZone");
  static const JsonPath<String> locale = JsonPath.internal(["locale"], "/locale");
  static const JsonPath<String> installationIdentifier = JsonPath.internal(["installationIdentifier"], "/installationIdentifier");
  static const JsonPath<String> appIdentifier = JsonPath.internal(["appIdentifier"], "/appIdentifier");
  static const JsonPath<String> appVersion = JsonPath.internal(["appVersion"], "/appVersion");
  static const JsonPath<String> deviceToken = JsonPath.internal(["deviceToken"], "/deviceToken");
  static final Set<JsonPath> values = {
    type, dateInstalled, dateUpdated, timeZone, locale, installationIdentifier, appIdentifier, appVersion, deviceToken
  };
}


const ClientInfoRef = MSchemaRef("mverse", "sunny", "clientInfo", "0.0.1", "ephemeral");

typedef _ClientInfoConstructor = IClientInfo Function({   String? type, 
  DateTime? dateInstalled, 
  DateTime? dateUpdated, 
  String? timeZone, 
  String? locale, 
  String? installationIdentifier, 
  String? appIdentifier, 
  String? appVersion, 
  String? deviceToken
 });
typedef _ClientInfoFromJson = IClientInfo Function(dynamic any);