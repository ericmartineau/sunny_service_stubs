// ignore_for_file: duplicate_import, unused_import, directives_ordering, unnecessary_null_comparison, unnecessary_non_null_assertion

// DO NOT EDIT THIS FILE.  IT IS GENERATED AUTOMATICALLY AND YOUR CHANGES WILL BE OVERWRITTEN

import 'package:sunny_sdk_core/model_exports.dart';
import '../sunny_ext.dart';

import '../model/group_permission.dart';
import '../model/tag.dart';


abstract class IGroupData
  implements MModel {

  static late _GroupDataConstructor of;
  static late _GroupDataFromJson fromJson;

  /// Property getter and setter for type: 
  String? get type;
  set type(String? type);


  /// Property getter and setter for identifier: 
  String? get identifier;
  set identifier(String? identifier);


  /// Property getter and setter for name: 
  String? get name;
  set name(String? name);


  /// Property getter and setter for picture: 
  String? get picture;
  set picture(String? picture);


  /// Property getter and setter for favorite: 
  int? get favorite;
  set favorite(int? favorite);


  /// Property getter and setter for description: 
  String? get description;
  set description(String? description);


  /// Property getter and setter for contacts: 
  List<String>? get contacts;
  set contacts(List<String>? contacts);


  /// Property getter and setter for automations: 
  List<String>? get automations;
  set automations(List<String>? automations);


  /// Property getter and setter for permissions: 
  List<IGroupPermission>? get permissions;
  set permissions(List<IGroupPermission>? permissions);


  /// Property getter and setter for tags: 
  List<ITag>? get tags;
  set tags(List<ITag>? tags);


  @override
  String toString();
  dynamic toJson();

  @override
  operator [](key);

  @override
  operator []=(String key, value);

  @override
  void takeFrom(source);

  @override
  void takeFromMap(Map<String, dynamic>? from, {bool copyEntries = true});

  @override
  IGroupData clone();

  @override
  Set<String> get mfields => GroupDataFields.values;

}

class GroupDataFields {
  static const type = "type";
  static const identifier = "identifier";
  static const name = "name";
  static const picture = "picture";
  static const favorite = "favorite";
  static const description = "description";
  static const contacts = "contacts";
  static const automations = "automations";
  static const permissions = "permissions";
  static const tags = "tags";
  static const Set<String> values = {
    type, identifier, name, picture, favorite, description, contacts, automations, permissions, tags
  };
}

class GroupDataPaths {
  static const JsonPath<String> type = JsonPath.internal(["type"], "/type");
  static const JsonPath<String> identifier = JsonPath.internal(["identifier"], "/identifier");
  static const JsonPath<String> name = JsonPath.internal(["name"], "/name");
  static const JsonPath<String> picture = JsonPath.internal(["picture"], "/picture");
  static const JsonPath<int> favorite = JsonPath.internal(["favorite"], "/favorite");
  static const JsonPath<String> description = JsonPath.internal(["description"], "/description");
  static const JsonPath<List<String>> contacts = JsonPath.internal(["contacts"], "/contacts");
  static const JsonPath<List<String>> automations = JsonPath.internal(["automations"], "/automations");
  static const JsonPath<List<IGroupPermission>> permissions = JsonPath.internal(["permissions"], "/permissions");
  static const JsonPath<List<ITag>> tags = JsonPath.internal(["tags"], "/tags");
  static final Set<JsonPath> values = {
    type, identifier, name, picture, favorite, description, contacts, automations, permissions, tags
  };
}


class GroupDataType extends MLiteral<String> {
  const GroupDataType._internal(String value): super(value);
  // ignore: non_constant_identifier_names
  static const GroupDataType list_ = GroupDataType._internal("list");
  // ignore: non_constant_identifier_names
  static const GroupDataType profile_ = GroupDataType._internal("profile");

  static GroupDataType fromJson(dynamic data) {
    switch (data?.toString()) {
      case "list": return GroupDataType.list_;
      case "profile": return GroupDataType.profile_;
      default: throw('Unknown enum value to decode: $data');
    }
  }

  static dynamic encode(GroupDataType data) => data.value;
  dynamic toJson() => json.encode(value);

}
const GroupDataRef = MSchemaRef("mverse", "sunny", "groupData", "0.0.1", "ephemeral");

typedef _GroupDataConstructor = IGroupData Function({   required String? type, 
  required String? identifier, 
  required String? name, 
  String? picture, 
  int? favorite, 
  String? description, 
  required List<String>? contacts, 
  required List<String>? automations, 
  required List<IGroupPermission>? permissions, 
  required List<ITag>? tags
 });
typedef _GroupDataFromJson = IGroupData Function(dynamic any);